"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StageRetryMode = exports.NotLatestPipelineExecutionException = exports.ConflictException = exports.InvalidWebhookFilterPatternException = exports.InvalidWebhookAuthenticationParametersException = exports.OutputVariablesSizeExceededException = exports.FailureType = exports.InvalidJobStateException = exports.InvalidApprovalTokenException = exports.WebhookAuthenticationType = exports.ResourceNotFoundException = exports.InvalidArnException = exports.TriggerType = exports.InvalidNextTokenException = exports.InvalidJobException = exports.StageExecutionStatus = exports.PipelineExecutionNotFoundException = exports.PipelineExecutionStatus = exports.PipelineVersionNotFoundException = exports.StageNotFoundException = exports.PipelineNotFoundException = exports.StageTransitionType = exports.WebhookNotFoundException = exports.PipelineNameInUseException = exports.InvalidStructureException = exports.InvalidStageDeclarationException = exports.InvalidBlockerDeclarationException = exports.InvalidActionDeclarationException = exports.TooManyTagsException = exports.LimitExceededException = exports.InvalidTagsException = exports.ConcurrentModificationException = exports.BlockerType = exports.ArtifactStoreType = exports.EncryptionKeyType = exports.ArtifactLocationType = exports.ApprovalStatus = exports.ApprovalAlreadyCompletedException = exports.ActionTypeNotFoundException = exports.ExecutorType = exports.ActionNotFoundException = exports.ActionExecutionStatus = exports.ActionOwner = exports.ActionConfigurationPropertyType = exports.ActionCategory = exports.InvalidClientTokenException = exports.ValidationException = exports.JobNotFoundException = exports.InvalidNonceException = exports.JobStatus = void 0;
exports.PollForJobsOutputFilterSensitiveLog = exports.JobFilterSensitiveLog = exports.GetThirdPartyJobDetailsOutputFilterSensitiveLog = exports.ThirdPartyJobDetailsFilterSensitiveLog = exports.ThirdPartyJobDataFilterSensitiveLog = exports.GetJobDetailsOutputFilterSensitiveLog = exports.JobDetailsFilterSensitiveLog = exports.JobDataFilterSensitiveLog = exports.AWSSessionCredentialsFilterSensitiveLog = exports.RequestFailedException = exports.PipelineExecutionNotStoppableException = exports.DuplicatedStopRequestException = exports.StageNotRetryableException = void 0;
const smithy_client_1 = require("@smithy/smithy-client");
const CodePipelineServiceException_1 = require("./CodePipelineServiceException");
exports.JobStatus = {
    Created: "Created",
    Dispatched: "Dispatched",
    Failed: "Failed",
    InProgress: "InProgress",
    Queued: "Queued",
    Succeeded: "Succeeded",
    TimedOut: "TimedOut",
};
class InvalidNonceException extends CodePipelineServiceException_1.CodePipelineServiceException {
    constructor(opts) {
        super({
            name: "InvalidNonceException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidNonceException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidNonceException.prototype);
    }
}
exports.InvalidNonceException = InvalidNonceException;
class JobNotFoundException extends CodePipelineServiceException_1.CodePipelineServiceException {
    constructor(opts) {
        super({
            name: "JobNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "JobNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, JobNotFoundException.prototype);
    }
}
exports.JobNotFoundException = JobNotFoundException;
class ValidationException extends CodePipelineServiceException_1.CodePipelineServiceException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
    }
}
exports.ValidationException = ValidationException;
class InvalidClientTokenException extends CodePipelineServiceException_1.CodePipelineServiceException {
    constructor(opts) {
        super({
            name: "InvalidClientTokenException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidClientTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidClientTokenException.prototype);
    }
}
exports.InvalidClientTokenException = InvalidClientTokenException;
exports.ActionCategory = {
    Approval: "Approval",
    Build: "Build",
    Deploy: "Deploy",
    Invoke: "Invoke",
    Source: "Source",
    Test: "Test",
};
exports.ActionConfigurationPropertyType = {
    Boolean: "Boolean",
    Number: "Number",
    String: "String",
};
exports.ActionOwner = {
    AWS: "AWS",
    Custom: "Custom",
    ThirdParty: "ThirdParty",
};
exports.ActionExecutionStatus = {
    Abandoned: "Abandoned",
    Failed: "Failed",
    InProgress: "InProgress",
    Succeeded: "Succeeded",
};
class ActionNotFoundException extends CodePipelineServiceException_1.CodePipelineServiceException {
    constructor(opts) {
        super({
            name: "ActionNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ActionNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ActionNotFoundException.prototype);
    }
}
exports.ActionNotFoundException = ActionNotFoundException;
exports.ExecutorType = {
    JobWorker: "JobWorker",
    Lambda: "Lambda",
};
class ActionTypeNotFoundException extends CodePipelineServiceException_1.CodePipelineServiceException {
    constructor(opts) {
        super({
            name: "ActionTypeNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ActionTypeNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ActionTypeNotFoundException.prototype);
    }
}
exports.ActionTypeNotFoundException = ActionTypeNotFoundException;
class ApprovalAlreadyCompletedException extends CodePipelineServiceException_1.CodePipelineServiceException {
    constructor(opts) {
        super({
            name: "ApprovalAlreadyCompletedException",
            $fault: "client",
            ...opts,
        });
        this.name = "ApprovalAlreadyCompletedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ApprovalAlreadyCompletedException.prototype);
    }
}
exports.ApprovalAlreadyCompletedException = ApprovalAlreadyCompletedException;
exports.ApprovalStatus = {
    Approved: "Approved",
    Rejected: "Rejected",
};
exports.ArtifactLocationType = {
    S3: "S3",
};
exports.EncryptionKeyType = {
    KMS: "KMS",
};
exports.ArtifactStoreType = {
    S3: "S3",
};
exports.BlockerType = {
    Schedule: "Schedule",
};
class ConcurrentModificationException extends CodePipelineServiceException_1.CodePipelineServiceException {
    constructor(opts) {
        super({
            name: "ConcurrentModificationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConcurrentModificationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConcurrentModificationException.prototype);
    }
}
exports.ConcurrentModificationException = ConcurrentModificationException;
class InvalidTagsException extends CodePipelineServiceException_1.CodePipelineServiceException {
    constructor(opts) {
        super({
            name: "InvalidTagsException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidTagsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTagsException.prototype);
    }
}
exports.InvalidTagsException = InvalidTagsException;
class LimitExceededException extends CodePipelineServiceException_1.CodePipelineServiceException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
    }
}
exports.LimitExceededException = LimitExceededException;
class TooManyTagsException extends CodePipelineServiceException_1.CodePipelineServiceException {
    constructor(opts) {
        super({
            name: "TooManyTagsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyTagsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyTagsException.prototype);
    }
}
exports.TooManyTagsException = TooManyTagsException;
class InvalidActionDeclarationException extends CodePipelineServiceException_1.CodePipelineServiceException {
    constructor(opts) {
        super({
            name: "InvalidActionDeclarationException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidActionDeclarationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidActionDeclarationException.prototype);
    }
}
exports.InvalidActionDeclarationException = InvalidActionDeclarationException;
class InvalidBlockerDeclarationException extends CodePipelineServiceException_1.CodePipelineServiceException {
    constructor(opts) {
        super({
            name: "InvalidBlockerDeclarationException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidBlockerDeclarationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidBlockerDeclarationException.prototype);
    }
}
exports.InvalidBlockerDeclarationException = InvalidBlockerDeclarationException;
class InvalidStageDeclarationException extends CodePipelineServiceException_1.CodePipelineServiceException {
    constructor(opts) {
        super({
            name: "InvalidStageDeclarationException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidStageDeclarationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidStageDeclarationException.prototype);
    }
}
exports.InvalidStageDeclarationException = InvalidStageDeclarationException;
class InvalidStructureException extends CodePipelineServiceException_1.CodePipelineServiceException {
    constructor(opts) {
        super({
            name: "InvalidStructureException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidStructureException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidStructureException.prototype);
    }
}
exports.InvalidStructureException = InvalidStructureException;
class PipelineNameInUseException extends CodePipelineServiceException_1.CodePipelineServiceException {
    constructor(opts) {
        super({
            name: "PipelineNameInUseException",
            $fault: "client",
            ...opts,
        });
        this.name = "PipelineNameInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PipelineNameInUseException.prototype);
    }
}
exports.PipelineNameInUseException = PipelineNameInUseException;
class WebhookNotFoundException extends CodePipelineServiceException_1.CodePipelineServiceException {
    constructor(opts) {
        super({
            name: "WebhookNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "WebhookNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, WebhookNotFoundException.prototype);
    }
}
exports.WebhookNotFoundException = WebhookNotFoundException;
exports.StageTransitionType = {
    Inbound: "Inbound",
    Outbound: "Outbound",
};
class PipelineNotFoundException extends CodePipelineServiceException_1.CodePipelineServiceException {
    constructor(opts) {
        super({
            name: "PipelineNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "PipelineNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PipelineNotFoundException.prototype);
    }
}
exports.PipelineNotFoundException = PipelineNotFoundException;
class StageNotFoundException extends CodePipelineServiceException_1.CodePipelineServiceException {
    constructor(opts) {
        super({
            name: "StageNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "StageNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, StageNotFoundException.prototype);
    }
}
exports.StageNotFoundException = StageNotFoundException;
class PipelineVersionNotFoundException extends CodePipelineServiceException_1.CodePipelineServiceException {
    constructor(opts) {
        super({
            name: "PipelineVersionNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "PipelineVersionNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PipelineVersionNotFoundException.prototype);
    }
}
exports.PipelineVersionNotFoundException = PipelineVersionNotFoundException;
exports.PipelineExecutionStatus = {
    Cancelled: "Cancelled",
    Failed: "Failed",
    InProgress: "InProgress",
    Stopped: "Stopped",
    Stopping: "Stopping",
    Succeeded: "Succeeded",
    Superseded: "Superseded",
};
class PipelineExecutionNotFoundException extends CodePipelineServiceException_1.CodePipelineServiceException {
    constructor(opts) {
        super({
            name: "PipelineExecutionNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "PipelineExecutionNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PipelineExecutionNotFoundException.prototype);
    }
}
exports.PipelineExecutionNotFoundException = PipelineExecutionNotFoundException;
exports.StageExecutionStatus = {
    Cancelled: "Cancelled",
    Failed: "Failed",
    InProgress: "InProgress",
    Stopped: "Stopped",
    Stopping: "Stopping",
    Succeeded: "Succeeded",
};
class InvalidJobException extends CodePipelineServiceException_1.CodePipelineServiceException {
    constructor(opts) {
        super({
            name: "InvalidJobException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidJobException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidJobException.prototype);
    }
}
exports.InvalidJobException = InvalidJobException;
class InvalidNextTokenException extends CodePipelineServiceException_1.CodePipelineServiceException {
    constructor(opts) {
        super({
            name: "InvalidNextTokenException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidNextTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidNextTokenException.prototype);
    }
}
exports.InvalidNextTokenException = InvalidNextTokenException;
exports.TriggerType = {
    CloudWatchEvent: "CloudWatchEvent",
    CreatePipeline: "CreatePipeline",
    PollForSourceChanges: "PollForSourceChanges",
    PutActionRevision: "PutActionRevision",
    StartPipelineExecution: "StartPipelineExecution",
    Webhook: "Webhook",
};
class InvalidArnException extends CodePipelineServiceException_1.CodePipelineServiceException {
    constructor(opts) {
        super({
            name: "InvalidArnException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidArnException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidArnException.prototype);
    }
}
exports.InvalidArnException = InvalidArnException;
class ResourceNotFoundException extends CodePipelineServiceException_1.CodePipelineServiceException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
exports.ResourceNotFoundException = ResourceNotFoundException;
exports.WebhookAuthenticationType = {
    GITHUB_HMAC: "GITHUB_HMAC",
    IP: "IP",
    UNAUTHENTICATED: "UNAUTHENTICATED",
};
class InvalidApprovalTokenException extends CodePipelineServiceException_1.CodePipelineServiceException {
    constructor(opts) {
        super({
            name: "InvalidApprovalTokenException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidApprovalTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidApprovalTokenException.prototype);
    }
}
exports.InvalidApprovalTokenException = InvalidApprovalTokenException;
class InvalidJobStateException extends CodePipelineServiceException_1.CodePipelineServiceException {
    constructor(opts) {
        super({
            name: "InvalidJobStateException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidJobStateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidJobStateException.prototype);
    }
}
exports.InvalidJobStateException = InvalidJobStateException;
exports.FailureType = {
    ConfigurationError: "ConfigurationError",
    JobFailed: "JobFailed",
    PermissionError: "PermissionError",
    RevisionOutOfSync: "RevisionOutOfSync",
    RevisionUnavailable: "RevisionUnavailable",
    SystemUnavailable: "SystemUnavailable",
};
class OutputVariablesSizeExceededException extends CodePipelineServiceException_1.CodePipelineServiceException {
    constructor(opts) {
        super({
            name: "OutputVariablesSizeExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "OutputVariablesSizeExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OutputVariablesSizeExceededException.prototype);
    }
}
exports.OutputVariablesSizeExceededException = OutputVariablesSizeExceededException;
class InvalidWebhookAuthenticationParametersException extends CodePipelineServiceException_1.CodePipelineServiceException {
    constructor(opts) {
        super({
            name: "InvalidWebhookAuthenticationParametersException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidWebhookAuthenticationParametersException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidWebhookAuthenticationParametersException.prototype);
    }
}
exports.InvalidWebhookAuthenticationParametersException = InvalidWebhookAuthenticationParametersException;
class InvalidWebhookFilterPatternException extends CodePipelineServiceException_1.CodePipelineServiceException {
    constructor(opts) {
        super({
            name: "InvalidWebhookFilterPatternException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidWebhookFilterPatternException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidWebhookFilterPatternException.prototype);
    }
}
exports.InvalidWebhookFilterPatternException = InvalidWebhookFilterPatternException;
class ConflictException extends CodePipelineServiceException_1.CodePipelineServiceException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
    }
}
exports.ConflictException = ConflictException;
class NotLatestPipelineExecutionException extends CodePipelineServiceException_1.CodePipelineServiceException {
    constructor(opts) {
        super({
            name: "NotLatestPipelineExecutionException",
            $fault: "client",
            ...opts,
        });
        this.name = "NotLatestPipelineExecutionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotLatestPipelineExecutionException.prototype);
    }
}
exports.NotLatestPipelineExecutionException = NotLatestPipelineExecutionException;
exports.StageRetryMode = {
    FAILED_ACTIONS: "FAILED_ACTIONS",
};
class StageNotRetryableException extends CodePipelineServiceException_1.CodePipelineServiceException {
    constructor(opts) {
        super({
            name: "StageNotRetryableException",
            $fault: "client",
            ...opts,
        });
        this.name = "StageNotRetryableException";
        this.$fault = "client";
        Object.setPrototypeOf(this, StageNotRetryableException.prototype);
    }
}
exports.StageNotRetryableException = StageNotRetryableException;
class DuplicatedStopRequestException extends CodePipelineServiceException_1.CodePipelineServiceException {
    constructor(opts) {
        super({
            name: "DuplicatedStopRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "DuplicatedStopRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DuplicatedStopRequestException.prototype);
    }
}
exports.DuplicatedStopRequestException = DuplicatedStopRequestException;
class PipelineExecutionNotStoppableException extends CodePipelineServiceException_1.CodePipelineServiceException {
    constructor(opts) {
        super({
            name: "PipelineExecutionNotStoppableException",
            $fault: "client",
            ...opts,
        });
        this.name = "PipelineExecutionNotStoppableException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PipelineExecutionNotStoppableException.prototype);
    }
}
exports.PipelineExecutionNotStoppableException = PipelineExecutionNotStoppableException;
class RequestFailedException extends CodePipelineServiceException_1.CodePipelineServiceException {
    constructor(opts) {
        super({
            name: "RequestFailedException",
            $fault: "client",
            ...opts,
        });
        this.name = "RequestFailedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RequestFailedException.prototype);
    }
}
exports.RequestFailedException = RequestFailedException;
const AWSSessionCredentialsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.accessKeyId && { accessKeyId: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.secretAccessKey && { secretAccessKey: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.sessionToken && { sessionToken: smithy_client_1.SENSITIVE_STRING }),
});
exports.AWSSessionCredentialsFilterSensitiveLog = AWSSessionCredentialsFilterSensitiveLog;
const JobDataFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.artifactCredentials && { artifactCredentials: smithy_client_1.SENSITIVE_STRING }),
});
exports.JobDataFilterSensitiveLog = JobDataFilterSensitiveLog;
const JobDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.data && { data: (0, exports.JobDataFilterSensitiveLog)(obj.data) }),
});
exports.JobDetailsFilterSensitiveLog = JobDetailsFilterSensitiveLog;
const GetJobDetailsOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.jobDetails && { jobDetails: (0, exports.JobDetailsFilterSensitiveLog)(obj.jobDetails) }),
});
exports.GetJobDetailsOutputFilterSensitiveLog = GetJobDetailsOutputFilterSensitiveLog;
const ThirdPartyJobDataFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.artifactCredentials && { artifactCredentials: smithy_client_1.SENSITIVE_STRING }),
});
exports.ThirdPartyJobDataFilterSensitiveLog = ThirdPartyJobDataFilterSensitiveLog;
const ThirdPartyJobDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.data && { data: (0, exports.ThirdPartyJobDataFilterSensitiveLog)(obj.data) }),
});
exports.ThirdPartyJobDetailsFilterSensitiveLog = ThirdPartyJobDetailsFilterSensitiveLog;
const GetThirdPartyJobDetailsOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.jobDetails && { jobDetails: (0, exports.ThirdPartyJobDetailsFilterSensitiveLog)(obj.jobDetails) }),
});
exports.GetThirdPartyJobDetailsOutputFilterSensitiveLog = GetThirdPartyJobDetailsOutputFilterSensitiveLog;
const JobFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.data && { data: (0, exports.JobDataFilterSensitiveLog)(obj.data) }),
});
exports.JobFilterSensitiveLog = JobFilterSensitiveLog;
const PollForJobsOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.jobs && { jobs: obj.jobs.map((item) => (0, exports.JobFilterSensitiveLog)(item)) }),
});
exports.PollForJobsOutputFilterSensitiveLog = PollForJobsOutputFilterSensitiveLog;
