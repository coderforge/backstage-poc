"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.de_GetActionTypeCommand = exports.de_EnableStageTransitionCommand = exports.de_DisableStageTransitionCommand = exports.de_DeregisterWebhookWithThirdPartyCommand = exports.de_DeleteWebhookCommand = exports.de_DeletePipelineCommand = exports.de_DeleteCustomActionTypeCommand = exports.de_CreatePipelineCommand = exports.de_CreateCustomActionTypeCommand = exports.de_AcknowledgeThirdPartyJobCommand = exports.de_AcknowledgeJobCommand = exports.se_UpdatePipelineCommand = exports.se_UpdateActionTypeCommand = exports.se_UntagResourceCommand = exports.se_TagResourceCommand = exports.se_StopPipelineExecutionCommand = exports.se_StartPipelineExecutionCommand = exports.se_RetryStageExecutionCommand = exports.se_RegisterWebhookWithThirdPartyCommand = exports.se_PutWebhookCommand = exports.se_PutThirdPartyJobSuccessResultCommand = exports.se_PutThirdPartyJobFailureResultCommand = exports.se_PutJobSuccessResultCommand = exports.se_PutJobFailureResultCommand = exports.se_PutApprovalResultCommand = exports.se_PutActionRevisionCommand = exports.se_PollForThirdPartyJobsCommand = exports.se_PollForJobsCommand = exports.se_ListWebhooksCommand = exports.se_ListTagsForResourceCommand = exports.se_ListPipelinesCommand = exports.se_ListPipelineExecutionsCommand = exports.se_ListActionTypesCommand = exports.se_ListActionExecutionsCommand = exports.se_GetThirdPartyJobDetailsCommand = exports.se_GetPipelineStateCommand = exports.se_GetPipelineExecutionCommand = exports.se_GetPipelineCommand = exports.se_GetJobDetailsCommand = exports.se_GetActionTypeCommand = exports.se_EnableStageTransitionCommand = exports.se_DisableStageTransitionCommand = exports.se_DeregisterWebhookWithThirdPartyCommand = exports.se_DeleteWebhookCommand = exports.se_DeletePipelineCommand = exports.se_DeleteCustomActionTypeCommand = exports.se_CreatePipelineCommand = exports.se_CreateCustomActionTypeCommand = exports.se_AcknowledgeThirdPartyJobCommand = exports.se_AcknowledgeJobCommand = void 0;
exports.de_UpdatePipelineCommand = exports.de_UpdateActionTypeCommand = exports.de_UntagResourceCommand = exports.de_TagResourceCommand = exports.de_StopPipelineExecutionCommand = exports.de_StartPipelineExecutionCommand = exports.de_RetryStageExecutionCommand = exports.de_RegisterWebhookWithThirdPartyCommand = exports.de_PutWebhookCommand = exports.de_PutThirdPartyJobSuccessResultCommand = exports.de_PutThirdPartyJobFailureResultCommand = exports.de_PutJobSuccessResultCommand = exports.de_PutJobFailureResultCommand = exports.de_PutApprovalResultCommand = exports.de_PutActionRevisionCommand = exports.de_PollForThirdPartyJobsCommand = exports.de_PollForJobsCommand = exports.de_ListWebhooksCommand = exports.de_ListTagsForResourceCommand = exports.de_ListPipelinesCommand = exports.de_ListPipelineExecutionsCommand = exports.de_ListActionTypesCommand = exports.de_ListActionExecutionsCommand = exports.de_GetThirdPartyJobDetailsCommand = exports.de_GetPipelineStateCommand = exports.de_GetPipelineExecutionCommand = exports.de_GetPipelineCommand = exports.de_GetJobDetailsCommand = void 0;
const protocol_http_1 = require("@smithy/protocol-http");
const smithy_client_1 = require("@smithy/smithy-client");
const uuid_1 = require("uuid");
const CodePipelineServiceException_1 = require("../models/CodePipelineServiceException");
const models_0_1 = require("../models/models_0");
const se_AcknowledgeJobCommand = async (input, context) => {
    const headers = sharedHeaders("AcknowledgeJob");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_AcknowledgeJobCommand = se_AcknowledgeJobCommand;
const se_AcknowledgeThirdPartyJobCommand = async (input, context) => {
    const headers = sharedHeaders("AcknowledgeThirdPartyJob");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_AcknowledgeThirdPartyJobCommand = se_AcknowledgeThirdPartyJobCommand;
const se_CreateCustomActionTypeCommand = async (input, context) => {
    const headers = sharedHeaders("CreateCustomActionType");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateCustomActionTypeCommand = se_CreateCustomActionTypeCommand;
const se_CreatePipelineCommand = async (input, context) => {
    const headers = sharedHeaders("CreatePipeline");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreatePipelineCommand = se_CreatePipelineCommand;
const se_DeleteCustomActionTypeCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteCustomActionType");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteCustomActionTypeCommand = se_DeleteCustomActionTypeCommand;
const se_DeletePipelineCommand = async (input, context) => {
    const headers = sharedHeaders("DeletePipeline");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeletePipelineCommand = se_DeletePipelineCommand;
const se_DeleteWebhookCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteWebhook");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteWebhookCommand = se_DeleteWebhookCommand;
const se_DeregisterWebhookWithThirdPartyCommand = async (input, context) => {
    const headers = sharedHeaders("DeregisterWebhookWithThirdParty");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeregisterWebhookWithThirdPartyCommand = se_DeregisterWebhookWithThirdPartyCommand;
const se_DisableStageTransitionCommand = async (input, context) => {
    const headers = sharedHeaders("DisableStageTransition");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DisableStageTransitionCommand = se_DisableStageTransitionCommand;
const se_EnableStageTransitionCommand = async (input, context) => {
    const headers = sharedHeaders("EnableStageTransition");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_EnableStageTransitionCommand = se_EnableStageTransitionCommand;
const se_GetActionTypeCommand = async (input, context) => {
    const headers = sharedHeaders("GetActionType");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetActionTypeCommand = se_GetActionTypeCommand;
const se_GetJobDetailsCommand = async (input, context) => {
    const headers = sharedHeaders("GetJobDetails");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetJobDetailsCommand = se_GetJobDetailsCommand;
const se_GetPipelineCommand = async (input, context) => {
    const headers = sharedHeaders("GetPipeline");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetPipelineCommand = se_GetPipelineCommand;
const se_GetPipelineExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("GetPipelineExecution");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetPipelineExecutionCommand = se_GetPipelineExecutionCommand;
const se_GetPipelineStateCommand = async (input, context) => {
    const headers = sharedHeaders("GetPipelineState");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetPipelineStateCommand = se_GetPipelineStateCommand;
const se_GetThirdPartyJobDetailsCommand = async (input, context) => {
    const headers = sharedHeaders("GetThirdPartyJobDetails");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetThirdPartyJobDetailsCommand = se_GetThirdPartyJobDetailsCommand;
const se_ListActionExecutionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListActionExecutions");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListActionExecutionsCommand = se_ListActionExecutionsCommand;
const se_ListActionTypesCommand = async (input, context) => {
    const headers = sharedHeaders("ListActionTypes");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListActionTypesCommand = se_ListActionTypesCommand;
const se_ListPipelineExecutionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListPipelineExecutions");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListPipelineExecutionsCommand = se_ListPipelineExecutionsCommand;
const se_ListPipelinesCommand = async (input, context) => {
    const headers = sharedHeaders("ListPipelines");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListPipelinesCommand = se_ListPipelinesCommand;
const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListTagsForResourceCommand = se_ListTagsForResourceCommand;
const se_ListWebhooksCommand = async (input, context) => {
    const headers = sharedHeaders("ListWebhooks");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListWebhooksCommand = se_ListWebhooksCommand;
const se_PollForJobsCommand = async (input, context) => {
    const headers = sharedHeaders("PollForJobs");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PollForJobsCommand = se_PollForJobsCommand;
const se_PollForThirdPartyJobsCommand = async (input, context) => {
    const headers = sharedHeaders("PollForThirdPartyJobs");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PollForThirdPartyJobsCommand = se_PollForThirdPartyJobsCommand;
const se_PutActionRevisionCommand = async (input, context) => {
    const headers = sharedHeaders("PutActionRevision");
    let body;
    body = JSON.stringify(se_PutActionRevisionInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutActionRevisionCommand = se_PutActionRevisionCommand;
const se_PutApprovalResultCommand = async (input, context) => {
    const headers = sharedHeaders("PutApprovalResult");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutApprovalResultCommand = se_PutApprovalResultCommand;
const se_PutJobFailureResultCommand = async (input, context) => {
    const headers = sharedHeaders("PutJobFailureResult");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutJobFailureResultCommand = se_PutJobFailureResultCommand;
const se_PutJobSuccessResultCommand = async (input, context) => {
    const headers = sharedHeaders("PutJobSuccessResult");
    let body;
    body = JSON.stringify(se_PutJobSuccessResultInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutJobSuccessResultCommand = se_PutJobSuccessResultCommand;
const se_PutThirdPartyJobFailureResultCommand = async (input, context) => {
    const headers = sharedHeaders("PutThirdPartyJobFailureResult");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutThirdPartyJobFailureResultCommand = se_PutThirdPartyJobFailureResultCommand;
const se_PutThirdPartyJobSuccessResultCommand = async (input, context) => {
    const headers = sharedHeaders("PutThirdPartyJobSuccessResult");
    let body;
    body = JSON.stringify(se_PutThirdPartyJobSuccessResultInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutThirdPartyJobSuccessResultCommand = se_PutThirdPartyJobSuccessResultCommand;
const se_PutWebhookCommand = async (input, context) => {
    const headers = sharedHeaders("PutWebhook");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutWebhookCommand = se_PutWebhookCommand;
const se_RegisterWebhookWithThirdPartyCommand = async (input, context) => {
    const headers = sharedHeaders("RegisterWebhookWithThirdParty");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RegisterWebhookWithThirdPartyCommand = se_RegisterWebhookWithThirdPartyCommand;
const se_RetryStageExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("RetryStageExecution");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RetryStageExecutionCommand = se_RetryStageExecutionCommand;
const se_StartPipelineExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("StartPipelineExecution");
    let body;
    body = JSON.stringify(se_StartPipelineExecutionInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartPipelineExecutionCommand = se_StartPipelineExecutionCommand;
const se_StopPipelineExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("StopPipelineExecution");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StopPipelineExecutionCommand = se_StopPipelineExecutionCommand;
const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_TagResourceCommand = se_TagResourceCommand;
const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UntagResourceCommand = se_UntagResourceCommand;
const se_UpdateActionTypeCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateActionType");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateActionTypeCommand = se_UpdateActionTypeCommand;
const se_UpdatePipelineCommand = async (input, context) => {
    const headers = sharedHeaders("UpdatePipeline");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdatePipelineCommand = se_UpdatePipelineCommand;
const de_AcknowledgeJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AcknowledgeJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_AcknowledgeJobCommand = de_AcknowledgeJobCommand;
const de_AcknowledgeJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNonceException":
        case "com.amazonaws.codepipeline#InvalidNonceException":
            throw await de_InvalidNonceExceptionRes(parsedOutput, context);
        case "JobNotFoundException":
        case "com.amazonaws.codepipeline#JobNotFoundException":
            throw await de_JobNotFoundExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AcknowledgeThirdPartyJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AcknowledgeThirdPartyJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_AcknowledgeThirdPartyJobCommand = de_AcknowledgeThirdPartyJobCommand;
const de_AcknowledgeThirdPartyJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidClientTokenException":
        case "com.amazonaws.codepipeline#InvalidClientTokenException":
            throw await de_InvalidClientTokenExceptionRes(parsedOutput, context);
        case "InvalidNonceException":
        case "com.amazonaws.codepipeline#InvalidNonceException":
            throw await de_InvalidNonceExceptionRes(parsedOutput, context);
        case "JobNotFoundException":
        case "com.amazonaws.codepipeline#JobNotFoundException":
            throw await de_JobNotFoundExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateCustomActionTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateCustomActionTypeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateCustomActionTypeCommand = de_CreateCustomActionTypeCommand;
const de_CreateCustomActionTypeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.codepipeline#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "InvalidTagsException":
        case "com.amazonaws.codepipeline#InvalidTagsException":
            throw await de_InvalidTagsExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.codepipeline#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.codepipeline#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreatePipelineCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreatePipelineCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreatePipelineCommand = de_CreatePipelineCommand;
const de_CreatePipelineCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.codepipeline#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "InvalidActionDeclarationException":
        case "com.amazonaws.codepipeline#InvalidActionDeclarationException":
            throw await de_InvalidActionDeclarationExceptionRes(parsedOutput, context);
        case "InvalidBlockerDeclarationException":
        case "com.amazonaws.codepipeline#InvalidBlockerDeclarationException":
            throw await de_InvalidBlockerDeclarationExceptionRes(parsedOutput, context);
        case "InvalidStageDeclarationException":
        case "com.amazonaws.codepipeline#InvalidStageDeclarationException":
            throw await de_InvalidStageDeclarationExceptionRes(parsedOutput, context);
        case "InvalidStructureException":
        case "com.amazonaws.codepipeline#InvalidStructureException":
            throw await de_InvalidStructureExceptionRes(parsedOutput, context);
        case "InvalidTagsException":
        case "com.amazonaws.codepipeline#InvalidTagsException":
            throw await de_InvalidTagsExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.codepipeline#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "PipelineNameInUseException":
        case "com.amazonaws.codepipeline#PipelineNameInUseException":
            throw await de_PipelineNameInUseExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.codepipeline#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteCustomActionTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteCustomActionTypeCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_DeleteCustomActionTypeCommand = de_DeleteCustomActionTypeCommand;
const de_DeleteCustomActionTypeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.codepipeline#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeletePipelineCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeletePipelineCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_DeletePipelineCommand = de_DeletePipelineCommand;
const de_DeletePipelineCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.codepipeline#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteWebhookCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteWebhookCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteWebhookCommand = de_DeleteWebhookCommand;
const de_DeleteWebhookCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.codepipeline#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeregisterWebhookWithThirdPartyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeregisterWebhookWithThirdPartyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeregisterWebhookWithThirdPartyCommand = de_DeregisterWebhookWithThirdPartyCommand;
const de_DeregisterWebhookWithThirdPartyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "WebhookNotFoundException":
        case "com.amazonaws.codepipeline#WebhookNotFoundException":
            throw await de_WebhookNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DisableStageTransitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DisableStageTransitionCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_DisableStageTransitionCommand = de_DisableStageTransitionCommand;
const de_DisableStageTransitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "PipelineNotFoundException":
        case "com.amazonaws.codepipeline#PipelineNotFoundException":
            throw await de_PipelineNotFoundExceptionRes(parsedOutput, context);
        case "StageNotFoundException":
        case "com.amazonaws.codepipeline#StageNotFoundException":
            throw await de_StageNotFoundExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_EnableStageTransitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_EnableStageTransitionCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_EnableStageTransitionCommand = de_EnableStageTransitionCommand;
const de_EnableStageTransitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "PipelineNotFoundException":
        case "com.amazonaws.codepipeline#PipelineNotFoundException":
            throw await de_PipelineNotFoundExceptionRes(parsedOutput, context);
        case "StageNotFoundException":
        case "com.amazonaws.codepipeline#StageNotFoundException":
            throw await de_StageNotFoundExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetActionTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetActionTypeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetActionTypeCommand = de_GetActionTypeCommand;
const de_GetActionTypeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ActionTypeNotFoundException":
        case "com.amazonaws.codepipeline#ActionTypeNotFoundException":
            throw await de_ActionTypeNotFoundExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetJobDetailsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetJobDetailsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetJobDetailsCommand = de_GetJobDetailsCommand;
const de_GetJobDetailsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "JobNotFoundException":
        case "com.amazonaws.codepipeline#JobNotFoundException":
            throw await de_JobNotFoundExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetPipelineCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetPipelineCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetPipelineOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetPipelineCommand = de_GetPipelineCommand;
const de_GetPipelineCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "PipelineNotFoundException":
        case "com.amazonaws.codepipeline#PipelineNotFoundException":
            throw await de_PipelineNotFoundExceptionRes(parsedOutput, context);
        case "PipelineVersionNotFoundException":
        case "com.amazonaws.codepipeline#PipelineVersionNotFoundException":
            throw await de_PipelineVersionNotFoundExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetPipelineExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetPipelineExecutionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetPipelineExecutionOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetPipelineExecutionCommand = de_GetPipelineExecutionCommand;
const de_GetPipelineExecutionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "PipelineExecutionNotFoundException":
        case "com.amazonaws.codepipeline#PipelineExecutionNotFoundException":
            throw await de_PipelineExecutionNotFoundExceptionRes(parsedOutput, context);
        case "PipelineNotFoundException":
        case "com.amazonaws.codepipeline#PipelineNotFoundException":
            throw await de_PipelineNotFoundExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetPipelineStateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetPipelineStateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetPipelineStateOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetPipelineStateCommand = de_GetPipelineStateCommand;
const de_GetPipelineStateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "PipelineNotFoundException":
        case "com.amazonaws.codepipeline#PipelineNotFoundException":
            throw await de_PipelineNotFoundExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetThirdPartyJobDetailsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetThirdPartyJobDetailsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetThirdPartyJobDetailsCommand = de_GetThirdPartyJobDetailsCommand;
const de_GetThirdPartyJobDetailsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidClientTokenException":
        case "com.amazonaws.codepipeline#InvalidClientTokenException":
            throw await de_InvalidClientTokenExceptionRes(parsedOutput, context);
        case "InvalidJobException":
        case "com.amazonaws.codepipeline#InvalidJobException":
            throw await de_InvalidJobExceptionRes(parsedOutput, context);
        case "JobNotFoundException":
        case "com.amazonaws.codepipeline#JobNotFoundException":
            throw await de_JobNotFoundExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListActionExecutionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListActionExecutionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListActionExecutionsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListActionExecutionsCommand = de_ListActionExecutionsCommand;
const de_ListActionExecutionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.codepipeline#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "PipelineExecutionNotFoundException":
        case "com.amazonaws.codepipeline#PipelineExecutionNotFoundException":
            throw await de_PipelineExecutionNotFoundExceptionRes(parsedOutput, context);
        case "PipelineNotFoundException":
        case "com.amazonaws.codepipeline#PipelineNotFoundException":
            throw await de_PipelineNotFoundExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListActionTypesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListActionTypesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListActionTypesCommand = de_ListActionTypesCommand;
const de_ListActionTypesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.codepipeline#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListPipelineExecutionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListPipelineExecutionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListPipelineExecutionsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListPipelineExecutionsCommand = de_ListPipelineExecutionsCommand;
const de_ListPipelineExecutionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.codepipeline#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "PipelineNotFoundException":
        case "com.amazonaws.codepipeline#PipelineNotFoundException":
            throw await de_PipelineNotFoundExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListPipelinesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListPipelinesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListPipelinesOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListPipelinesCommand = de_ListPipelinesCommand;
const de_ListPipelinesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.codepipeline#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListTagsForResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListTagsForResourceCommand = de_ListTagsForResourceCommand;
const de_ListTagsForResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidArnException":
        case "com.amazonaws.codepipeline#InvalidArnException":
            throw await de_InvalidArnExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.codepipeline#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codepipeline#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListWebhooksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListWebhooksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListWebhooksOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListWebhooksCommand = de_ListWebhooksCommand;
const de_ListWebhooksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.codepipeline#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PollForJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PollForJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_PollForJobsCommand = de_PollForJobsCommand;
const de_PollForJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ActionTypeNotFoundException":
        case "com.amazonaws.codepipeline#ActionTypeNotFoundException":
            throw await de_ActionTypeNotFoundExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PollForThirdPartyJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PollForThirdPartyJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_PollForThirdPartyJobsCommand = de_PollForThirdPartyJobsCommand;
const de_PollForThirdPartyJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ActionTypeNotFoundException":
        case "com.amazonaws.codepipeline#ActionTypeNotFoundException":
            throw await de_ActionTypeNotFoundExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutActionRevisionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutActionRevisionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_PutActionRevisionCommand = de_PutActionRevisionCommand;
const de_PutActionRevisionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ActionNotFoundException":
        case "com.amazonaws.codepipeline#ActionNotFoundException":
            throw await de_ActionNotFoundExceptionRes(parsedOutput, context);
        case "PipelineNotFoundException":
        case "com.amazonaws.codepipeline#PipelineNotFoundException":
            throw await de_PipelineNotFoundExceptionRes(parsedOutput, context);
        case "StageNotFoundException":
        case "com.amazonaws.codepipeline#StageNotFoundException":
            throw await de_StageNotFoundExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutApprovalResultCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutApprovalResultCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutApprovalResultOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_PutApprovalResultCommand = de_PutApprovalResultCommand;
const de_PutApprovalResultCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ActionNotFoundException":
        case "com.amazonaws.codepipeline#ActionNotFoundException":
            throw await de_ActionNotFoundExceptionRes(parsedOutput, context);
        case "ApprovalAlreadyCompletedException":
        case "com.amazonaws.codepipeline#ApprovalAlreadyCompletedException":
            throw await de_ApprovalAlreadyCompletedExceptionRes(parsedOutput, context);
        case "InvalidApprovalTokenException":
        case "com.amazonaws.codepipeline#InvalidApprovalTokenException":
            throw await de_InvalidApprovalTokenExceptionRes(parsedOutput, context);
        case "PipelineNotFoundException":
        case "com.amazonaws.codepipeline#PipelineNotFoundException":
            throw await de_PipelineNotFoundExceptionRes(parsedOutput, context);
        case "StageNotFoundException":
        case "com.amazonaws.codepipeline#StageNotFoundException":
            throw await de_StageNotFoundExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutJobFailureResultCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutJobFailureResultCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_PutJobFailureResultCommand = de_PutJobFailureResultCommand;
const de_PutJobFailureResultCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidJobStateException":
        case "com.amazonaws.codepipeline#InvalidJobStateException":
            throw await de_InvalidJobStateExceptionRes(parsedOutput, context);
        case "JobNotFoundException":
        case "com.amazonaws.codepipeline#JobNotFoundException":
            throw await de_JobNotFoundExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutJobSuccessResultCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutJobSuccessResultCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_PutJobSuccessResultCommand = de_PutJobSuccessResultCommand;
const de_PutJobSuccessResultCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidJobStateException":
        case "com.amazonaws.codepipeline#InvalidJobStateException":
            throw await de_InvalidJobStateExceptionRes(parsedOutput, context);
        case "JobNotFoundException":
        case "com.amazonaws.codepipeline#JobNotFoundException":
            throw await de_JobNotFoundExceptionRes(parsedOutput, context);
        case "OutputVariablesSizeExceededException":
        case "com.amazonaws.codepipeline#OutputVariablesSizeExceededException":
            throw await de_OutputVariablesSizeExceededExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutThirdPartyJobFailureResultCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutThirdPartyJobFailureResultCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_PutThirdPartyJobFailureResultCommand = de_PutThirdPartyJobFailureResultCommand;
const de_PutThirdPartyJobFailureResultCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidClientTokenException":
        case "com.amazonaws.codepipeline#InvalidClientTokenException":
            throw await de_InvalidClientTokenExceptionRes(parsedOutput, context);
        case "InvalidJobStateException":
        case "com.amazonaws.codepipeline#InvalidJobStateException":
            throw await de_InvalidJobStateExceptionRes(parsedOutput, context);
        case "JobNotFoundException":
        case "com.amazonaws.codepipeline#JobNotFoundException":
            throw await de_JobNotFoundExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutThirdPartyJobSuccessResultCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutThirdPartyJobSuccessResultCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_PutThirdPartyJobSuccessResultCommand = de_PutThirdPartyJobSuccessResultCommand;
const de_PutThirdPartyJobSuccessResultCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidClientTokenException":
        case "com.amazonaws.codepipeline#InvalidClientTokenException":
            throw await de_InvalidClientTokenExceptionRes(parsedOutput, context);
        case "InvalidJobStateException":
        case "com.amazonaws.codepipeline#InvalidJobStateException":
            throw await de_InvalidJobStateExceptionRes(parsedOutput, context);
        case "JobNotFoundException":
        case "com.amazonaws.codepipeline#JobNotFoundException":
            throw await de_JobNotFoundExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutWebhookCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutWebhookCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutWebhookOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_PutWebhookCommand = de_PutWebhookCommand;
const de_PutWebhookCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.codepipeline#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "InvalidTagsException":
        case "com.amazonaws.codepipeline#InvalidTagsException":
            throw await de_InvalidTagsExceptionRes(parsedOutput, context);
        case "InvalidWebhookAuthenticationParametersException":
        case "com.amazonaws.codepipeline#InvalidWebhookAuthenticationParametersException":
            throw await de_InvalidWebhookAuthenticationParametersExceptionRes(parsedOutput, context);
        case "InvalidWebhookFilterPatternException":
        case "com.amazonaws.codepipeline#InvalidWebhookFilterPatternException":
            throw await de_InvalidWebhookFilterPatternExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.codepipeline#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "PipelineNotFoundException":
        case "com.amazonaws.codepipeline#PipelineNotFoundException":
            throw await de_PipelineNotFoundExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.codepipeline#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_RegisterWebhookWithThirdPartyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RegisterWebhookWithThirdPartyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_RegisterWebhookWithThirdPartyCommand = de_RegisterWebhookWithThirdPartyCommand;
const de_RegisterWebhookWithThirdPartyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "WebhookNotFoundException":
        case "com.amazonaws.codepipeline#WebhookNotFoundException":
            throw await de_WebhookNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_RetryStageExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RetryStageExecutionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_RetryStageExecutionCommand = de_RetryStageExecutionCommand;
const de_RetryStageExecutionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.codepipeline#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "NotLatestPipelineExecutionException":
        case "com.amazonaws.codepipeline#NotLatestPipelineExecutionException":
            throw await de_NotLatestPipelineExecutionExceptionRes(parsedOutput, context);
        case "PipelineNotFoundException":
        case "com.amazonaws.codepipeline#PipelineNotFoundException":
            throw await de_PipelineNotFoundExceptionRes(parsedOutput, context);
        case "StageNotFoundException":
        case "com.amazonaws.codepipeline#StageNotFoundException":
            throw await de_StageNotFoundExceptionRes(parsedOutput, context);
        case "StageNotRetryableException":
        case "com.amazonaws.codepipeline#StageNotRetryableException":
            throw await de_StageNotRetryableExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StartPipelineExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartPipelineExecutionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StartPipelineExecutionCommand = de_StartPipelineExecutionCommand;
const de_StartPipelineExecutionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.codepipeline#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "PipelineNotFoundException":
        case "com.amazonaws.codepipeline#PipelineNotFoundException":
            throw await de_PipelineNotFoundExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StopPipelineExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopPipelineExecutionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StopPipelineExecutionCommand = de_StopPipelineExecutionCommand;
const de_StopPipelineExecutionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.codepipeline#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "DuplicatedStopRequestException":
        case "com.amazonaws.codepipeline#DuplicatedStopRequestException":
            throw await de_DuplicatedStopRequestExceptionRes(parsedOutput, context);
        case "PipelineExecutionNotStoppableException":
        case "com.amazonaws.codepipeline#PipelineExecutionNotStoppableException":
            throw await de_PipelineExecutionNotStoppableExceptionRes(parsedOutput, context);
        case "PipelineNotFoundException":
        case "com.amazonaws.codepipeline#PipelineNotFoundException":
            throw await de_PipelineNotFoundExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_TagResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_TagResourceCommand = de_TagResourceCommand;
const de_TagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.codepipeline#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "InvalidArnException":
        case "com.amazonaws.codepipeline#InvalidArnException":
            throw await de_InvalidArnExceptionRes(parsedOutput, context);
        case "InvalidTagsException":
        case "com.amazonaws.codepipeline#InvalidTagsException":
            throw await de_InvalidTagsExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codepipeline#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.codepipeline#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UntagResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UntagResourceCommand = de_UntagResourceCommand;
const de_UntagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.codepipeline#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "InvalidArnException":
        case "com.amazonaws.codepipeline#InvalidArnException":
            throw await de_InvalidArnExceptionRes(parsedOutput, context);
        case "InvalidTagsException":
        case "com.amazonaws.codepipeline#InvalidTagsException":
            throw await de_InvalidTagsExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codepipeline#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateActionTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateActionTypeCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_UpdateActionTypeCommand = de_UpdateActionTypeCommand;
const de_UpdateActionTypeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ActionTypeNotFoundException":
        case "com.amazonaws.codepipeline#ActionTypeNotFoundException":
            throw await de_ActionTypeNotFoundExceptionRes(parsedOutput, context);
        case "RequestFailedException":
        case "com.amazonaws.codepipeline#RequestFailedException":
            throw await de_RequestFailedExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdatePipelineCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdatePipelineCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdatePipelineCommand = de_UpdatePipelineCommand;
const de_UpdatePipelineCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidActionDeclarationException":
        case "com.amazonaws.codepipeline#InvalidActionDeclarationException":
            throw await de_InvalidActionDeclarationExceptionRes(parsedOutput, context);
        case "InvalidBlockerDeclarationException":
        case "com.amazonaws.codepipeline#InvalidBlockerDeclarationException":
            throw await de_InvalidBlockerDeclarationExceptionRes(parsedOutput, context);
        case "InvalidStageDeclarationException":
        case "com.amazonaws.codepipeline#InvalidStageDeclarationException":
            throw await de_InvalidStageDeclarationExceptionRes(parsedOutput, context);
        case "InvalidStructureException":
        case "com.amazonaws.codepipeline#InvalidStructureException":
            throw await de_InvalidStructureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.codepipeline#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codepipeline#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ActionNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ActionNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ActionTypeNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ActionTypeNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ApprovalAlreadyCompletedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ApprovalAlreadyCompletedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ConcurrentModificationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ConcurrentModificationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DuplicatedStopRequestExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.DuplicatedStopRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidActionDeclarationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidActionDeclarationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidApprovalTokenExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidApprovalTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidArnExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidArnException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidBlockerDeclarationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidBlockerDeclarationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidClientTokenExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidClientTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidJobExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidJobException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidJobStateExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidJobStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidNextTokenExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidNextTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidNonceExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidNonceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidStageDeclarationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidStageDeclarationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidStructureExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidStructureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidTagsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidTagsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidWebhookAuthenticationParametersExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidWebhookAuthenticationParametersException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidWebhookFilterPatternExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidWebhookFilterPatternException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_JobNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.JobNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NotLatestPipelineExecutionExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.NotLatestPipelineExecutionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_OutputVariablesSizeExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.OutputVariablesSizeExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_PipelineExecutionNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.PipelineExecutionNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_PipelineExecutionNotStoppableExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.PipelineExecutionNotStoppableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_PipelineNameInUseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.PipelineNameInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_PipelineNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.PipelineNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_PipelineVersionNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.PipelineVersionNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_RequestFailedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.RequestFailedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_StageNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.StageNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_StageNotRetryableExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.StageNotRetryableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_TooManyTagsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.TooManyTagsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_WebhookNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.WebhookNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const se_ActionRevision = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        created: (_) => Math.round(_.getTime() / 1000),
        revisionChangeId: [],
        revisionId: [],
    });
};
const se_CurrentRevision = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        changeIdentifier: [],
        created: (_) => Math.round(_.getTime() / 1000),
        revision: [],
        revisionSummary: [],
    });
};
const se_PutActionRevisionInput = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        actionName: [],
        actionRevision: (_) => se_ActionRevision(_, context),
        pipelineName: [],
        stageName: [],
    });
};
const se_PutJobSuccessResultInput = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        continuationToken: [],
        currentRevision: (_) => se_CurrentRevision(_, context),
        executionDetails: smithy_client_1._json,
        jobId: [],
        outputVariables: smithy_client_1._json,
    });
};
const se_PutThirdPartyJobSuccessResultInput = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        clientToken: [],
        continuationToken: [],
        currentRevision: (_) => se_CurrentRevision(_, context),
        executionDetails: smithy_client_1._json,
        jobId: [],
    });
};
const se_StartPipelineExecutionInput = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        clientRequestToken: [true, (_) => _ ?? (0, uuid_1.v4)()],
        name: [],
    });
};
const de_ActionExecution = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        actionExecutionId: smithy_client_1.expectString,
        errorDetails: smithy_client_1._json,
        externalExecutionId: smithy_client_1.expectString,
        externalExecutionUrl: smithy_client_1.expectString,
        lastStatusChange: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        lastUpdatedBy: smithy_client_1.expectString,
        percentComplete: smithy_client_1.expectInt32,
        status: smithy_client_1.expectString,
        summary: smithy_client_1.expectString,
        token: smithy_client_1.expectString,
    });
};
const de_ActionExecutionDetail = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        actionExecutionId: smithy_client_1.expectString,
        actionName: smithy_client_1.expectString,
        input: smithy_client_1._json,
        lastUpdateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        output: smithy_client_1._json,
        pipelineExecutionId: smithy_client_1.expectString,
        pipelineVersion: smithy_client_1.expectInt32,
        stageName: smithy_client_1.expectString,
        startTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        status: smithy_client_1.expectString,
    });
};
const de_ActionExecutionDetailList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ActionExecutionDetail(entry, context);
    });
    return retVal;
};
const de_ActionRevision = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        created: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        revisionChangeId: smithy_client_1.expectString,
        revisionId: smithy_client_1.expectString,
    });
};
const de_ActionState = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        actionName: smithy_client_1.expectString,
        currentRevision: (_) => de_ActionRevision(_, context),
        entityUrl: smithy_client_1.expectString,
        latestExecution: (_) => de_ActionExecution(_, context),
        revisionUrl: smithy_client_1.expectString,
    });
};
const de_ActionStateList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ActionState(entry, context);
    });
    return retVal;
};
const de_ArtifactRevision = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        created: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        name: smithy_client_1.expectString,
        revisionChangeIdentifier: smithy_client_1.expectString,
        revisionId: smithy_client_1.expectString,
        revisionSummary: smithy_client_1.expectString,
        revisionUrl: smithy_client_1.expectString,
    });
};
const de_ArtifactRevisionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ArtifactRevision(entry, context);
    });
    return retVal;
};
const de_GetPipelineExecutionOutput = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        pipelineExecution: (_) => de_PipelineExecution(_, context),
    });
};
const de_GetPipelineOutput = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        metadata: (_) => de_PipelineMetadata(_, context),
        pipeline: smithy_client_1._json,
    });
};
const de_GetPipelineStateOutput = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        created: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        pipelineName: smithy_client_1.expectString,
        pipelineVersion: smithy_client_1.expectInt32,
        stageStates: (_) => de_StageStateList(_, context),
        updated: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
    });
};
const de_ListActionExecutionsOutput = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        actionExecutionDetails: (_) => de_ActionExecutionDetailList(_, context),
        nextToken: smithy_client_1.expectString,
    });
};
const de_ListPipelineExecutionsOutput = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        nextToken: smithy_client_1.expectString,
        pipelineExecutionSummaries: (_) => de_PipelineExecutionSummaryList(_, context),
    });
};
const de_ListPipelinesOutput = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        nextToken: smithy_client_1.expectString,
        pipelines: (_) => de_PipelineList(_, context),
    });
};
const de_ListWebhookItem = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        arn: smithy_client_1.expectString,
        definition: smithy_client_1._json,
        errorCode: smithy_client_1.expectString,
        errorMessage: smithy_client_1.expectString,
        lastTriggered: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        tags: smithy_client_1._json,
        url: smithy_client_1.expectString,
    });
};
const de_ListWebhooksOutput = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        webhooks: (_) => de_WebhookList(_, context),
    });
};
const de_PipelineExecution = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        artifactRevisions: (_) => de_ArtifactRevisionList(_, context),
        pipelineExecutionId: smithy_client_1.expectString,
        pipelineName: smithy_client_1.expectString,
        pipelineVersion: smithy_client_1.expectInt32,
        status: smithy_client_1.expectString,
        statusSummary: smithy_client_1.expectString,
    });
};
const de_PipelineExecutionSummary = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        lastUpdateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        pipelineExecutionId: smithy_client_1.expectString,
        sourceRevisions: smithy_client_1._json,
        startTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        status: smithy_client_1.expectString,
        stopTrigger: smithy_client_1._json,
        trigger: smithy_client_1._json,
    });
};
const de_PipelineExecutionSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PipelineExecutionSummary(entry, context);
    });
    return retVal;
};
const de_PipelineList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PipelineSummary(entry, context);
    });
    return retVal;
};
const de_PipelineMetadata = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        created: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        pipelineArn: smithy_client_1.expectString,
        pollingDisabledAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        updated: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
    });
};
const de_PipelineSummary = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        created: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        name: smithy_client_1.expectString,
        updated: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        version: smithy_client_1.expectInt32,
    });
};
const de_PutApprovalResultOutput = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        approvedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
    });
};
const de_PutWebhookOutput = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        webhook: (_) => de_ListWebhookItem(_, context),
    });
};
const de_StageState = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        actionStates: (_) => de_ActionStateList(_, context),
        inboundExecution: smithy_client_1._json,
        inboundTransitionState: (_) => de_TransitionState(_, context),
        latestExecution: smithy_client_1._json,
        stageName: smithy_client_1.expectString,
    });
};
const de_StageStateList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StageState(entry, context);
    });
    return retVal;
};
const de_TransitionState = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        disabledReason: smithy_client_1.expectString,
        enabled: smithy_client_1.expectBoolean,
        lastChangedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        lastChangedBy: smithy_client_1.expectString,
    });
};
const de_WebhookList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ListWebhookItem(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => (0, smithy_client_1.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = (0, smithy_client_1.withBaseException)(CodePipelineServiceException_1.CodePipelineServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocol_http_1.HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `CodePipeline_20150709.${operation}`,
    };
}
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
