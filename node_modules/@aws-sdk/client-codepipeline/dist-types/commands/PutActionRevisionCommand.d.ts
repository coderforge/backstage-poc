import { EndpointParameterInstructions } from "@smithy/middleware-endpoint";
import { Command as $Command } from "@smithy/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@smithy/types";
import { CodePipelineClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../CodePipelineClient";
import { PutActionRevisionInput, PutActionRevisionOutput } from "../models/models_0";
/**
 * @public
 */
export { __MetadataBearer, $Command };
/**
 * @public
 *
 * The input for {@link PutActionRevisionCommand}.
 */
export interface PutActionRevisionCommandInput extends PutActionRevisionInput {
}
/**
 * @public
 *
 * The output of {@link PutActionRevisionCommand}.
 */
export interface PutActionRevisionCommandOutput extends PutActionRevisionOutput, __MetadataBearer {
}
/**
 * @public
 * <p>Provides information to CodePipeline about new revisions to a
 *             source.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { CodePipelineClient, PutActionRevisionCommand } from "@aws-sdk/client-codepipeline"; // ES Modules import
 * // const { CodePipelineClient, PutActionRevisionCommand } = require("@aws-sdk/client-codepipeline"); // CommonJS import
 * const client = new CodePipelineClient(config);
 * const input = { // PutActionRevisionInput
 *   pipelineName: "STRING_VALUE", // required
 *   stageName: "STRING_VALUE", // required
 *   actionName: "STRING_VALUE", // required
 *   actionRevision: { // ActionRevision
 *     revisionId: "STRING_VALUE", // required
 *     revisionChangeId: "STRING_VALUE", // required
 *     created: new Date("TIMESTAMP"), // required
 *   },
 * };
 * const command = new PutActionRevisionCommand(input);
 * const response = await client.send(command);
 * // { // PutActionRevisionOutput
 * //   newRevision: true || false,
 * //   pipelineExecutionId: "STRING_VALUE",
 * // };
 *
 * ```
 *
 * @param PutActionRevisionCommandInput - {@link PutActionRevisionCommandInput}
 * @returns {@link PutActionRevisionCommandOutput}
 * @see {@link PutActionRevisionCommandInput} for command's `input` shape.
 * @see {@link PutActionRevisionCommandOutput} for command's `response` shape.
 * @see {@link CodePipelineClientResolvedConfig | config} for CodePipelineClient's `config` shape.
 *
 * @throws {@link ActionNotFoundException} (client fault)
 *  <p>The specified action cannot be found.</p>
 *
 * @throws {@link PipelineNotFoundException} (client fault)
 *  <p>The pipeline was specified in an invalid format or cannot be found.</p>
 *
 * @throws {@link StageNotFoundException} (client fault)
 *  <p>The stage was specified in an invalid format or cannot be found.</p>
 *
 * @throws {@link ValidationException} (client fault)
 *  <p>The validation was specified in an invalid format.</p>
 *
 * @throws {@link CodePipelineServiceException}
 * <p>Base exception class for all service exceptions from CodePipeline service.</p>
 *
 */
export declare class PutActionRevisionCommand extends $Command<PutActionRevisionCommandInput, PutActionRevisionCommandOutput, CodePipelineClientResolvedConfig> {
    readonly input: PutActionRevisionCommandInput;
    static getEndpointParameterInstructions(): EndpointParameterInstructions;
    /**
     * @public
     */
    constructor(input: PutActionRevisionCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodePipelineClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutActionRevisionCommandInput, PutActionRevisionCommandOutput>;
    /**
     * @internal
     */
    private serialize;
    /**
     * @internal
     */
    private deserialize;
}
