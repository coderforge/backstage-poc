import { EndpointParameterInstructions } from "@smithy/middleware-endpoint";
import { Command as $Command } from "@smithy/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@smithy/types";
import { CodePipelineClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../CodePipelineClient";
import { PollForThirdPartyJobsInput, PollForThirdPartyJobsOutput } from "../models/models_0";
/**
 * @public
 */
export { __MetadataBearer, $Command };
/**
 * @public
 *
 * The input for {@link PollForThirdPartyJobsCommand}.
 */
export interface PollForThirdPartyJobsCommandInput extends PollForThirdPartyJobsInput {
}
/**
 * @public
 *
 * The output of {@link PollForThirdPartyJobsCommand}.
 */
export interface PollForThirdPartyJobsCommandOutput extends PollForThirdPartyJobsOutput, __MetadataBearer {
}
/**
 * @public
 * <p>Determines whether there are any third party jobs for a job worker to act on. Used
 *             for partner actions only.</p>
 *          <important>
 *             <p>When this API is called, CodePipeline returns temporary credentials for
 *                 the S3 bucket used to store artifacts for the pipeline, if the action requires
 *                 access to that S3 bucket for input or output artifacts.</p>
 *          </important>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { CodePipelineClient, PollForThirdPartyJobsCommand } from "@aws-sdk/client-codepipeline"; // ES Modules import
 * // const { CodePipelineClient, PollForThirdPartyJobsCommand } = require("@aws-sdk/client-codepipeline"); // CommonJS import
 * const client = new CodePipelineClient(config);
 * const input = { // PollForThirdPartyJobsInput
 *   actionTypeId: { // ActionTypeId
 *     category: "Source" || "Build" || "Deploy" || "Test" || "Invoke" || "Approval", // required
 *     owner: "AWS" || "ThirdParty" || "Custom", // required
 *     provider: "STRING_VALUE", // required
 *     version: "STRING_VALUE", // required
 *   },
 *   maxBatchSize: Number("int"),
 * };
 * const command = new PollForThirdPartyJobsCommand(input);
 * const response = await client.send(command);
 * // { // PollForThirdPartyJobsOutput
 * //   jobs: [ // ThirdPartyJobList
 * //     { // ThirdPartyJob
 * //       clientId: "STRING_VALUE",
 * //       jobId: "STRING_VALUE",
 * //     },
 * //   ],
 * // };
 *
 * ```
 *
 * @param PollForThirdPartyJobsCommandInput - {@link PollForThirdPartyJobsCommandInput}
 * @returns {@link PollForThirdPartyJobsCommandOutput}
 * @see {@link PollForThirdPartyJobsCommandInput} for command's `input` shape.
 * @see {@link PollForThirdPartyJobsCommandOutput} for command's `response` shape.
 * @see {@link CodePipelineClientResolvedConfig | config} for CodePipelineClient's `config` shape.
 *
 * @throws {@link ActionTypeNotFoundException} (client fault)
 *  <p>The specified action type cannot be found.</p>
 *
 * @throws {@link ValidationException} (client fault)
 *  <p>The validation was specified in an invalid format.</p>
 *
 * @throws {@link CodePipelineServiceException}
 * <p>Base exception class for all service exceptions from CodePipeline service.</p>
 *
 */
export declare class PollForThirdPartyJobsCommand extends $Command<PollForThirdPartyJobsCommandInput, PollForThirdPartyJobsCommandOutput, CodePipelineClientResolvedConfig> {
    readonly input: PollForThirdPartyJobsCommandInput;
    static getEndpointParameterInstructions(): EndpointParameterInstructions;
    /**
     * @public
     */
    constructor(input: PollForThirdPartyJobsCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodePipelineClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PollForThirdPartyJobsCommandInput, PollForThirdPartyJobsCommandOutput>;
    /**
     * @internal
     */
    private serialize;
    /**
     * @internal
     */
    private deserialize;
}
