"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TargetLabel = exports.DeploymentTargetType = exports.TargetStatus = exports.FileExistsBehavior = exports.ErrorCode = exports.DeploymentCreator = exports.InvalidDeploymentIdException = exports.InvalidComputePlatformException = exports.InstanceIdRequiredException = exports.DeploymentIdRequiredException = exports.DeploymentDoesNotExistException = exports.InstanceStatus = exports.LifecycleEventStatus = exports.LifecycleErrorCode = exports._InstanceType = exports.InvalidDeploymentGroupNameException = exports.DeploymentGroupNameRequiredException = exports.DeploymentConfigDoesNotExistException = exports.TriggerEventType = exports.OutdatedInstancesStrategy = exports.TagFilterType = exports.DeploymentStatus = exports.EC2TagFilterType = exports.DeploymentType = exports.DeploymentOption = exports.InstanceAction = exports.GreenFleetProvisioningAction = exports.DeploymentReadyAction = exports.RevisionRequiredException = exports.InvalidRevisionException = exports.InvalidApplicationNameException = exports.BatchLimitExceededException = exports.BundleType = exports.RevisionLocationType = exports.AutoRollbackEvent = exports.ArnNotSupportedException = exports.ApplicationRevisionSortBy = exports.ApplicationNameRequiredException = exports.ApplicationLimitExceededException = exports.ComputePlatform = exports.ApplicationDoesNotExistException = exports.ApplicationAlreadyExistsException = exports.AlarmsLimitExceededException = exports.TagRequiredException = exports.TagLimitExceededException = exports.InvalidTagException = exports.InvalidInstanceNameException = exports.InstanceNotRegisteredException = exports.InstanceNameRequiredException = exports.InstanceLimitExceededException = void 0;
exports.LifecycleHookLimitExceededException = exports.InvalidTriggerConfigException = exports.InvalidTargetGroupPairException = exports.InvalidOnPremisesTagCombinationException = exports.InvalidInputException = exports.InvalidECSServiceException = exports.InvalidEC2TagException = exports.InvalidEC2TagCombinationException = exports.InvalidDeploymentStyleException = exports.InvalidBlueGreenDeploymentConfigurationException = exports.ECSServiceMappingLimitExceededException = exports.DeploymentGroupLimitExceededException = exports.DeploymentGroupAlreadyExistsException = exports.InvalidMinimumHealthyHostValueException = exports.DeploymentConfigNameRequiredException = exports.DeploymentConfigLimitExceededException = exports.DeploymentConfigAlreadyExistsException = exports.TrafficRoutingType = exports.MinimumHealthyHostsType = exports.ThrottlingException = exports.RevisionDoesNotExistException = exports.InvalidUpdateOutdatedInstancesOnlyValueException = exports.InvalidTrafficRoutingConfigurationException = exports.InvalidTargetInstancesException = exports.InvalidRoleException = exports.InvalidLoadBalancerInfoException = exports.InvalidIgnoreApplicationStopFailuresValueException = exports.InvalidGitHubAccountTokenException = exports.InvalidFileExistsBehaviorException = exports.InvalidDeploymentConfigNameException = exports.InvalidAutoScalingGroupException = exports.InvalidAutoRollbackConfigException = exports.InvalidAlarmConfigException = exports.DescriptionTooLongException = exports.DeploymentLimitExceededException = exports.DeploymentGroupDoesNotExistException = exports.InvalidTagsToAddException = exports.UnsupportedActionForDeploymentTypeException = exports.InvalidDeploymentWaitTypeException = exports.InvalidDeploymentStatusException = exports.DeploymentIsNotInReadyStateException = exports.DeploymentAlreadyCompletedException = exports.DeploymentWaitType = exports.BucketNameFilterRequiredException = exports.InvalidDeploymentTargetIdException = exports.InstanceDoesNotExistException = exports.DeploymentTargetListSizeExceededException = exports.DeploymentTargetIdRequiredException = exports.DeploymentTargetDoesNotExistException = exports.DeploymentNotStartedException = void 0;
exports.StopStatus = exports.MultipleIamArnsProvidedException = exports.InvalidIamUserArnException = exports.InvalidIamSessionArnException = exports.InstanceNameAlreadyRegisteredException = exports.IamUserArnRequiredException = exports.IamUserArnAlreadyRegisteredException = exports.IamSessionArnAlreadyRegisteredException = exports.IamArnRequiredException = exports.LifecycleEventAlreadyCompletedException = exports.InvalidLifecycleEventHookExecutionStatusException = exports.InvalidLifecycleEventHookExecutionIdException = exports.ResourceArnRequiredException = exports.InvalidArnException = exports.RegistrationStatus = exports.InvalidTagFilterException = exports.InvalidRegistrationStatusException = exports.TargetFilterName = exports.InvalidTimeRangeException = exports.InvalidExternalIdException = exports.InvalidTargetFilterNameException = exports.InvalidInstanceTypeException = exports.InvalidInstanceStatusException = exports.InvalidDeploymentInstanceTypeException = exports.SortOrder = exports.ListStateFilterAction = exports.InvalidSortOrderException = exports.InvalidSortByException = exports.InvalidNextTokenException = exports.InvalidKeyPrefixFilterException = exports.InvalidDeployedStateFilterException = exports.InvalidBucketNameFilterException = exports.ResourceValidationException = exports.OperationNotSupportedException = exports.InvalidGitHubAccountTokenNameException = exports.GitHubAccountTokenNameRequiredException = exports.GitHubAccountTokenDoesNotExistException = exports.InvalidOperationException = exports.DeploymentConfigInUseException = exports.TriggerTargetsLimitExceededException = exports.TagSetListLimitExceededException = exports.RoleRequiredException = void 0;
const CodeDeployServiceException_1 = require("./CodeDeployServiceException");
class InstanceLimitExceededException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InstanceLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "InstanceLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InstanceLimitExceededException.prototype);
    }
}
exports.InstanceLimitExceededException = InstanceLimitExceededException;
class InstanceNameRequiredException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InstanceNameRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "InstanceNameRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InstanceNameRequiredException.prototype);
    }
}
exports.InstanceNameRequiredException = InstanceNameRequiredException;
class InstanceNotRegisteredException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InstanceNotRegisteredException",
            $fault: "client",
            ...opts,
        });
        this.name = "InstanceNotRegisteredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InstanceNotRegisteredException.prototype);
    }
}
exports.InstanceNotRegisteredException = InstanceNotRegisteredException;
class InvalidInstanceNameException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidInstanceNameException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidInstanceNameException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInstanceNameException.prototype);
    }
}
exports.InvalidInstanceNameException = InvalidInstanceNameException;
class InvalidTagException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidTagException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidTagException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTagException.prototype);
    }
}
exports.InvalidTagException = InvalidTagException;
class TagLimitExceededException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "TagLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "TagLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TagLimitExceededException.prototype);
    }
}
exports.TagLimitExceededException = TagLimitExceededException;
class TagRequiredException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "TagRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "TagRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TagRequiredException.prototype);
    }
}
exports.TagRequiredException = TagRequiredException;
class AlarmsLimitExceededException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "AlarmsLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "AlarmsLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AlarmsLimitExceededException.prototype);
    }
}
exports.AlarmsLimitExceededException = AlarmsLimitExceededException;
class ApplicationAlreadyExistsException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "ApplicationAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "ApplicationAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ApplicationAlreadyExistsException.prototype);
    }
}
exports.ApplicationAlreadyExistsException = ApplicationAlreadyExistsException;
class ApplicationDoesNotExistException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "ApplicationDoesNotExistException",
            $fault: "client",
            ...opts,
        });
        this.name = "ApplicationDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ApplicationDoesNotExistException.prototype);
    }
}
exports.ApplicationDoesNotExistException = ApplicationDoesNotExistException;
exports.ComputePlatform = {
    ECS: "ECS",
    LAMBDA: "Lambda",
    SERVER: "Server",
};
class ApplicationLimitExceededException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "ApplicationLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ApplicationLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ApplicationLimitExceededException.prototype);
    }
}
exports.ApplicationLimitExceededException = ApplicationLimitExceededException;
class ApplicationNameRequiredException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "ApplicationNameRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "ApplicationNameRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ApplicationNameRequiredException.prototype);
    }
}
exports.ApplicationNameRequiredException = ApplicationNameRequiredException;
exports.ApplicationRevisionSortBy = {
    FirstUsedTime: "firstUsedTime",
    LastUsedTime: "lastUsedTime",
    RegisterTime: "registerTime",
};
class ArnNotSupportedException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "ArnNotSupportedException",
            $fault: "client",
            ...opts,
        });
        this.name = "ArnNotSupportedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ArnNotSupportedException.prototype);
    }
}
exports.ArnNotSupportedException = ArnNotSupportedException;
exports.AutoRollbackEvent = {
    DEPLOYMENT_FAILURE: "DEPLOYMENT_FAILURE",
    DEPLOYMENT_STOP_ON_ALARM: "DEPLOYMENT_STOP_ON_ALARM",
    DEPLOYMENT_STOP_ON_REQUEST: "DEPLOYMENT_STOP_ON_REQUEST",
};
exports.RevisionLocationType = {
    AppSpecContent: "AppSpecContent",
    GitHub: "GitHub",
    S3: "S3",
    String: "String",
};
exports.BundleType = {
    JSON: "JSON",
    Tar: "tar",
    TarGZip: "tgz",
    YAML: "YAML",
    Zip: "zip",
};
class BatchLimitExceededException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "BatchLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "BatchLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BatchLimitExceededException.prototype);
    }
}
exports.BatchLimitExceededException = BatchLimitExceededException;
class InvalidApplicationNameException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidApplicationNameException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidApplicationNameException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidApplicationNameException.prototype);
    }
}
exports.InvalidApplicationNameException = InvalidApplicationNameException;
class InvalidRevisionException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidRevisionException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRevisionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRevisionException.prototype);
    }
}
exports.InvalidRevisionException = InvalidRevisionException;
class RevisionRequiredException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "RevisionRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "RevisionRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RevisionRequiredException.prototype);
    }
}
exports.RevisionRequiredException = RevisionRequiredException;
exports.DeploymentReadyAction = {
    CONTINUE_DEPLOYMENT: "CONTINUE_DEPLOYMENT",
    STOP_DEPLOYMENT: "STOP_DEPLOYMENT",
};
exports.GreenFleetProvisioningAction = {
    COPY_AUTO_SCALING_GROUP: "COPY_AUTO_SCALING_GROUP",
    DISCOVER_EXISTING: "DISCOVER_EXISTING",
};
exports.InstanceAction = {
    KEEP_ALIVE: "KEEP_ALIVE",
    TERMINATE: "TERMINATE",
};
exports.DeploymentOption = {
    WITHOUT_TRAFFIC_CONTROL: "WITHOUT_TRAFFIC_CONTROL",
    WITH_TRAFFIC_CONTROL: "WITH_TRAFFIC_CONTROL",
};
exports.DeploymentType = {
    BLUE_GREEN: "BLUE_GREEN",
    IN_PLACE: "IN_PLACE",
};
exports.EC2TagFilterType = {
    KEY_AND_VALUE: "KEY_AND_VALUE",
    KEY_ONLY: "KEY_ONLY",
    VALUE_ONLY: "VALUE_ONLY",
};
exports.DeploymentStatus = {
    BAKING: "Baking",
    CREATED: "Created",
    FAILED: "Failed",
    IN_PROGRESS: "InProgress",
    QUEUED: "Queued",
    READY: "Ready",
    STOPPED: "Stopped",
    SUCCEEDED: "Succeeded",
};
exports.TagFilterType = {
    KEY_AND_VALUE: "KEY_AND_VALUE",
    KEY_ONLY: "KEY_ONLY",
    VALUE_ONLY: "VALUE_ONLY",
};
exports.OutdatedInstancesStrategy = {
    Ignore: "IGNORE",
    Update: "UPDATE",
};
exports.TriggerEventType = {
    DEPLOYMENT_FAILURE: "DeploymentFailure",
    DEPLOYMENT_READY: "DeploymentReady",
    DEPLOYMENT_ROLLBACK: "DeploymentRollback",
    DEPLOYMENT_START: "DeploymentStart",
    DEPLOYMENT_STOP: "DeploymentStop",
    DEPLOYMENT_SUCCESS: "DeploymentSuccess",
    INSTANCE_FAILURE: "InstanceFailure",
    INSTANCE_READY: "InstanceReady",
    INSTANCE_START: "InstanceStart",
    INSTANCE_SUCCESS: "InstanceSuccess",
};
class DeploymentConfigDoesNotExistException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "DeploymentConfigDoesNotExistException",
            $fault: "client",
            ...opts,
        });
        this.name = "DeploymentConfigDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeploymentConfigDoesNotExistException.prototype);
    }
}
exports.DeploymentConfigDoesNotExistException = DeploymentConfigDoesNotExistException;
class DeploymentGroupNameRequiredException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "DeploymentGroupNameRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "DeploymentGroupNameRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeploymentGroupNameRequiredException.prototype);
    }
}
exports.DeploymentGroupNameRequiredException = DeploymentGroupNameRequiredException;
class InvalidDeploymentGroupNameException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidDeploymentGroupNameException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDeploymentGroupNameException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDeploymentGroupNameException.prototype);
    }
}
exports.InvalidDeploymentGroupNameException = InvalidDeploymentGroupNameException;
exports._InstanceType = {
    BLUE: "Blue",
    GREEN: "Green",
};
exports.LifecycleErrorCode = {
    SCRIPT_FAILED: "ScriptFailed",
    SCRIPT_MISSING: "ScriptMissing",
    SCRIPT_NOT_EXECUTABLE: "ScriptNotExecutable",
    SCRIPT_TIMED_OUT: "ScriptTimedOut",
    SUCCESS: "Success",
    UNKNOWN_ERROR: "UnknownError",
};
exports.LifecycleEventStatus = {
    FAILED: "Failed",
    IN_PROGRESS: "InProgress",
    PENDING: "Pending",
    SKIPPED: "Skipped",
    SUCCEEDED: "Succeeded",
    UNKNOWN: "Unknown",
};
exports.InstanceStatus = {
    FAILED: "Failed",
    IN_PROGRESS: "InProgress",
    PENDING: "Pending",
    READY: "Ready",
    SKIPPED: "Skipped",
    SUCCEEDED: "Succeeded",
    UNKNOWN: "Unknown",
};
class DeploymentDoesNotExistException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "DeploymentDoesNotExistException",
            $fault: "client",
            ...opts,
        });
        this.name = "DeploymentDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeploymentDoesNotExistException.prototype);
    }
}
exports.DeploymentDoesNotExistException = DeploymentDoesNotExistException;
class DeploymentIdRequiredException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "DeploymentIdRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "DeploymentIdRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeploymentIdRequiredException.prototype);
    }
}
exports.DeploymentIdRequiredException = DeploymentIdRequiredException;
class InstanceIdRequiredException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InstanceIdRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "InstanceIdRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InstanceIdRequiredException.prototype);
    }
}
exports.InstanceIdRequiredException = InstanceIdRequiredException;
class InvalidComputePlatformException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidComputePlatformException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidComputePlatformException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidComputePlatformException.prototype);
    }
}
exports.InvalidComputePlatformException = InvalidComputePlatformException;
class InvalidDeploymentIdException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidDeploymentIdException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDeploymentIdException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDeploymentIdException.prototype);
    }
}
exports.InvalidDeploymentIdException = InvalidDeploymentIdException;
exports.DeploymentCreator = {
    Autoscaling: "autoscaling",
    CloudFormation: "CloudFormation",
    CloudFormationRollback: "CloudFormationRollback",
    CodeDeploy: "CodeDeploy",
    CodeDeployAutoUpdate: "CodeDeployAutoUpdate",
    CodeDeployRollback: "codeDeployRollback",
    User: "user",
};
exports.ErrorCode = {
    AGENT_ISSUE: "AGENT_ISSUE",
    ALARM_ACTIVE: "ALARM_ACTIVE",
    APPLICATION_MISSING: "APPLICATION_MISSING",
    AUTOSCALING_VALIDATION_ERROR: "AUTOSCALING_VALIDATION_ERROR",
    AUTO_SCALING_CONFIGURATION: "AUTO_SCALING_CONFIGURATION",
    AUTO_SCALING_IAM_ROLE_PERMISSIONS: "AUTO_SCALING_IAM_ROLE_PERMISSIONS",
    CLOUDFORMATION_STACK_FAILURE: "CLOUDFORMATION_STACK_FAILURE",
    CODEDEPLOY_RESOURCE_CANNOT_BE_FOUND: "CODEDEPLOY_RESOURCE_CANNOT_BE_FOUND",
    CUSTOMER_APPLICATION_UNHEALTHY: "CUSTOMER_APPLICATION_UNHEALTHY",
    DEPLOYMENT_GROUP_MISSING: "DEPLOYMENT_GROUP_MISSING",
    ECS_UPDATE_ERROR: "ECS_UPDATE_ERROR",
    ELASTIC_LOAD_BALANCING_INVALID: "ELASTIC_LOAD_BALANCING_INVALID",
    ELB_INVALID_INSTANCE: "ELB_INVALID_INSTANCE",
    HEALTH_CONSTRAINTS: "HEALTH_CONSTRAINTS",
    HEALTH_CONSTRAINTS_INVALID: "HEALTH_CONSTRAINTS_INVALID",
    HOOK_EXECUTION_FAILURE: "HOOK_EXECUTION_FAILURE",
    IAM_ROLE_MISSING: "IAM_ROLE_MISSING",
    IAM_ROLE_PERMISSIONS: "IAM_ROLE_PERMISSIONS",
    INTERNAL_ERROR: "INTERNAL_ERROR",
    INVALID_ECS_SERVICE: "INVALID_ECS_SERVICE",
    INVALID_LAMBDA_CONFIGURATION: "INVALID_LAMBDA_CONFIGURATION",
    INVALID_LAMBDA_FUNCTION: "INVALID_LAMBDA_FUNCTION",
    INVALID_REVISION: "INVALID_REVISION",
    MANUAL_STOP: "MANUAL_STOP",
    MISSING_BLUE_GREEN_DEPLOYMENT_CONFIGURATION: "MISSING_BLUE_GREEN_DEPLOYMENT_CONFIGURATION",
    MISSING_ELB_INFORMATION: "MISSING_ELB_INFORMATION",
    MISSING_GITHUB_TOKEN: "MISSING_GITHUB_TOKEN",
    NO_EC2_SUBSCRIPTION: "NO_EC2_SUBSCRIPTION",
    NO_INSTANCES: "NO_INSTANCES",
    OVER_MAX_INSTANCES: "OVER_MAX_INSTANCES",
    RESOURCE_LIMIT_EXCEEDED: "RESOURCE_LIMIT_EXCEEDED",
    REVISION_MISSING: "REVISION_MISSING",
    THROTTLED: "THROTTLED",
    TIMEOUT: "TIMEOUT",
};
exports.FileExistsBehavior = {
    DISALLOW: "DISALLOW",
    OVERWRITE: "OVERWRITE",
    RETAIN: "RETAIN",
};
exports.TargetStatus = {
    FAILED: "Failed",
    IN_PROGRESS: "InProgress",
    PENDING: "Pending",
    READY: "Ready",
    SKIPPED: "Skipped",
    SUCCEEDED: "Succeeded",
    UNKNOWN: "Unknown",
};
exports.DeploymentTargetType = {
    CLOUDFORMATION_TARGET: "CloudFormationTarget",
    ECS_TARGET: "ECSTarget",
    INSTANCE_TARGET: "InstanceTarget",
    LAMBDA_TARGET: "LambdaTarget",
};
exports.TargetLabel = {
    BLUE: "Blue",
    GREEN: "Green",
};
class DeploymentNotStartedException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "DeploymentNotStartedException",
            $fault: "client",
            ...opts,
        });
        this.name = "DeploymentNotStartedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeploymentNotStartedException.prototype);
    }
}
exports.DeploymentNotStartedException = DeploymentNotStartedException;
class DeploymentTargetDoesNotExistException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "DeploymentTargetDoesNotExistException",
            $fault: "client",
            ...opts,
        });
        this.name = "DeploymentTargetDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeploymentTargetDoesNotExistException.prototype);
    }
}
exports.DeploymentTargetDoesNotExistException = DeploymentTargetDoesNotExistException;
class DeploymentTargetIdRequiredException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "DeploymentTargetIdRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "DeploymentTargetIdRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeploymentTargetIdRequiredException.prototype);
    }
}
exports.DeploymentTargetIdRequiredException = DeploymentTargetIdRequiredException;
class DeploymentTargetListSizeExceededException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "DeploymentTargetListSizeExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "DeploymentTargetListSizeExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeploymentTargetListSizeExceededException.prototype);
    }
}
exports.DeploymentTargetListSizeExceededException = DeploymentTargetListSizeExceededException;
class InstanceDoesNotExistException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InstanceDoesNotExistException",
            $fault: "client",
            ...opts,
        });
        this.name = "InstanceDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InstanceDoesNotExistException.prototype);
    }
}
exports.InstanceDoesNotExistException = InstanceDoesNotExistException;
class InvalidDeploymentTargetIdException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidDeploymentTargetIdException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDeploymentTargetIdException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDeploymentTargetIdException.prototype);
    }
}
exports.InvalidDeploymentTargetIdException = InvalidDeploymentTargetIdException;
class BucketNameFilterRequiredException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "BucketNameFilterRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "BucketNameFilterRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BucketNameFilterRequiredException.prototype);
    }
}
exports.BucketNameFilterRequiredException = BucketNameFilterRequiredException;
exports.DeploymentWaitType = {
    READY_WAIT: "READY_WAIT",
    TERMINATION_WAIT: "TERMINATION_WAIT",
};
class DeploymentAlreadyCompletedException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "DeploymentAlreadyCompletedException",
            $fault: "client",
            ...opts,
        });
        this.name = "DeploymentAlreadyCompletedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeploymentAlreadyCompletedException.prototype);
    }
}
exports.DeploymentAlreadyCompletedException = DeploymentAlreadyCompletedException;
class DeploymentIsNotInReadyStateException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "DeploymentIsNotInReadyStateException",
            $fault: "client",
            ...opts,
        });
        this.name = "DeploymentIsNotInReadyStateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeploymentIsNotInReadyStateException.prototype);
    }
}
exports.DeploymentIsNotInReadyStateException = DeploymentIsNotInReadyStateException;
class InvalidDeploymentStatusException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidDeploymentStatusException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDeploymentStatusException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDeploymentStatusException.prototype);
    }
}
exports.InvalidDeploymentStatusException = InvalidDeploymentStatusException;
class InvalidDeploymentWaitTypeException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidDeploymentWaitTypeException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDeploymentWaitTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDeploymentWaitTypeException.prototype);
    }
}
exports.InvalidDeploymentWaitTypeException = InvalidDeploymentWaitTypeException;
class UnsupportedActionForDeploymentTypeException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "UnsupportedActionForDeploymentTypeException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnsupportedActionForDeploymentTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedActionForDeploymentTypeException.prototype);
    }
}
exports.UnsupportedActionForDeploymentTypeException = UnsupportedActionForDeploymentTypeException;
class InvalidTagsToAddException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidTagsToAddException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidTagsToAddException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTagsToAddException.prototype);
    }
}
exports.InvalidTagsToAddException = InvalidTagsToAddException;
class DeploymentGroupDoesNotExistException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "DeploymentGroupDoesNotExistException",
            $fault: "client",
            ...opts,
        });
        this.name = "DeploymentGroupDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeploymentGroupDoesNotExistException.prototype);
    }
}
exports.DeploymentGroupDoesNotExistException = DeploymentGroupDoesNotExistException;
class DeploymentLimitExceededException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "DeploymentLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "DeploymentLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeploymentLimitExceededException.prototype);
    }
}
exports.DeploymentLimitExceededException = DeploymentLimitExceededException;
class DescriptionTooLongException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "DescriptionTooLongException",
            $fault: "client",
            ...opts,
        });
        this.name = "DescriptionTooLongException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DescriptionTooLongException.prototype);
    }
}
exports.DescriptionTooLongException = DescriptionTooLongException;
class InvalidAlarmConfigException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidAlarmConfigException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidAlarmConfigException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAlarmConfigException.prototype);
    }
}
exports.InvalidAlarmConfigException = InvalidAlarmConfigException;
class InvalidAutoRollbackConfigException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidAutoRollbackConfigException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidAutoRollbackConfigException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAutoRollbackConfigException.prototype);
    }
}
exports.InvalidAutoRollbackConfigException = InvalidAutoRollbackConfigException;
class InvalidAutoScalingGroupException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidAutoScalingGroupException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidAutoScalingGroupException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAutoScalingGroupException.prototype);
    }
}
exports.InvalidAutoScalingGroupException = InvalidAutoScalingGroupException;
class InvalidDeploymentConfigNameException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidDeploymentConfigNameException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDeploymentConfigNameException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDeploymentConfigNameException.prototype);
    }
}
exports.InvalidDeploymentConfigNameException = InvalidDeploymentConfigNameException;
class InvalidFileExistsBehaviorException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidFileExistsBehaviorException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidFileExistsBehaviorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidFileExistsBehaviorException.prototype);
    }
}
exports.InvalidFileExistsBehaviorException = InvalidFileExistsBehaviorException;
class InvalidGitHubAccountTokenException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidGitHubAccountTokenException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidGitHubAccountTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidGitHubAccountTokenException.prototype);
    }
}
exports.InvalidGitHubAccountTokenException = InvalidGitHubAccountTokenException;
class InvalidIgnoreApplicationStopFailuresValueException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidIgnoreApplicationStopFailuresValueException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidIgnoreApplicationStopFailuresValueException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidIgnoreApplicationStopFailuresValueException.prototype);
    }
}
exports.InvalidIgnoreApplicationStopFailuresValueException = InvalidIgnoreApplicationStopFailuresValueException;
class InvalidLoadBalancerInfoException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidLoadBalancerInfoException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidLoadBalancerInfoException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidLoadBalancerInfoException.prototype);
    }
}
exports.InvalidLoadBalancerInfoException = InvalidLoadBalancerInfoException;
class InvalidRoleException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidRoleException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRoleException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRoleException.prototype);
    }
}
exports.InvalidRoleException = InvalidRoleException;
class InvalidTargetInstancesException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidTargetInstancesException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidTargetInstancesException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTargetInstancesException.prototype);
    }
}
exports.InvalidTargetInstancesException = InvalidTargetInstancesException;
class InvalidTrafficRoutingConfigurationException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidTrafficRoutingConfigurationException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidTrafficRoutingConfigurationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTrafficRoutingConfigurationException.prototype);
    }
}
exports.InvalidTrafficRoutingConfigurationException = InvalidTrafficRoutingConfigurationException;
class InvalidUpdateOutdatedInstancesOnlyValueException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidUpdateOutdatedInstancesOnlyValueException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidUpdateOutdatedInstancesOnlyValueException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidUpdateOutdatedInstancesOnlyValueException.prototype);
    }
}
exports.InvalidUpdateOutdatedInstancesOnlyValueException = InvalidUpdateOutdatedInstancesOnlyValueException;
class RevisionDoesNotExistException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "RevisionDoesNotExistException",
            $fault: "client",
            ...opts,
        });
        this.name = "RevisionDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RevisionDoesNotExistException.prototype);
    }
}
exports.RevisionDoesNotExistException = RevisionDoesNotExistException;
class ThrottlingException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
    }
}
exports.ThrottlingException = ThrottlingException;
exports.MinimumHealthyHostsType = {
    FLEET_PERCENT: "FLEET_PERCENT",
    HOST_COUNT: "HOST_COUNT",
};
exports.TrafficRoutingType = {
    AllAtOnce: "AllAtOnce",
    TimeBasedCanary: "TimeBasedCanary",
    TimeBasedLinear: "TimeBasedLinear",
};
class DeploymentConfigAlreadyExistsException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "DeploymentConfigAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "DeploymentConfigAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeploymentConfigAlreadyExistsException.prototype);
    }
}
exports.DeploymentConfigAlreadyExistsException = DeploymentConfigAlreadyExistsException;
class DeploymentConfigLimitExceededException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "DeploymentConfigLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "DeploymentConfigLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeploymentConfigLimitExceededException.prototype);
    }
}
exports.DeploymentConfigLimitExceededException = DeploymentConfigLimitExceededException;
class DeploymentConfigNameRequiredException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "DeploymentConfigNameRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "DeploymentConfigNameRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeploymentConfigNameRequiredException.prototype);
    }
}
exports.DeploymentConfigNameRequiredException = DeploymentConfigNameRequiredException;
class InvalidMinimumHealthyHostValueException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidMinimumHealthyHostValueException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidMinimumHealthyHostValueException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidMinimumHealthyHostValueException.prototype);
    }
}
exports.InvalidMinimumHealthyHostValueException = InvalidMinimumHealthyHostValueException;
class DeploymentGroupAlreadyExistsException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "DeploymentGroupAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "DeploymentGroupAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeploymentGroupAlreadyExistsException.prototype);
    }
}
exports.DeploymentGroupAlreadyExistsException = DeploymentGroupAlreadyExistsException;
class DeploymentGroupLimitExceededException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "DeploymentGroupLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "DeploymentGroupLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeploymentGroupLimitExceededException.prototype);
    }
}
exports.DeploymentGroupLimitExceededException = DeploymentGroupLimitExceededException;
class ECSServiceMappingLimitExceededException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "ECSServiceMappingLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ECSServiceMappingLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ECSServiceMappingLimitExceededException.prototype);
    }
}
exports.ECSServiceMappingLimitExceededException = ECSServiceMappingLimitExceededException;
class InvalidBlueGreenDeploymentConfigurationException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidBlueGreenDeploymentConfigurationException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidBlueGreenDeploymentConfigurationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidBlueGreenDeploymentConfigurationException.prototype);
    }
}
exports.InvalidBlueGreenDeploymentConfigurationException = InvalidBlueGreenDeploymentConfigurationException;
class InvalidDeploymentStyleException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidDeploymentStyleException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDeploymentStyleException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDeploymentStyleException.prototype);
    }
}
exports.InvalidDeploymentStyleException = InvalidDeploymentStyleException;
class InvalidEC2TagCombinationException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidEC2TagCombinationException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidEC2TagCombinationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidEC2TagCombinationException.prototype);
    }
}
exports.InvalidEC2TagCombinationException = InvalidEC2TagCombinationException;
class InvalidEC2TagException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidEC2TagException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidEC2TagException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidEC2TagException.prototype);
    }
}
exports.InvalidEC2TagException = InvalidEC2TagException;
class InvalidECSServiceException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidECSServiceException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidECSServiceException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidECSServiceException.prototype);
    }
}
exports.InvalidECSServiceException = InvalidECSServiceException;
class InvalidInputException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidInputException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidInputException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInputException.prototype);
    }
}
exports.InvalidInputException = InvalidInputException;
class InvalidOnPremisesTagCombinationException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidOnPremisesTagCombinationException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidOnPremisesTagCombinationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidOnPremisesTagCombinationException.prototype);
    }
}
exports.InvalidOnPremisesTagCombinationException = InvalidOnPremisesTagCombinationException;
class InvalidTargetGroupPairException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidTargetGroupPairException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidTargetGroupPairException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTargetGroupPairException.prototype);
    }
}
exports.InvalidTargetGroupPairException = InvalidTargetGroupPairException;
class InvalidTriggerConfigException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidTriggerConfigException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidTriggerConfigException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTriggerConfigException.prototype);
    }
}
exports.InvalidTriggerConfigException = InvalidTriggerConfigException;
class LifecycleHookLimitExceededException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "LifecycleHookLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LifecycleHookLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LifecycleHookLimitExceededException.prototype);
    }
}
exports.LifecycleHookLimitExceededException = LifecycleHookLimitExceededException;
class RoleRequiredException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "RoleRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "RoleRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RoleRequiredException.prototype);
    }
}
exports.RoleRequiredException = RoleRequiredException;
class TagSetListLimitExceededException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "TagSetListLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "TagSetListLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TagSetListLimitExceededException.prototype);
    }
}
exports.TagSetListLimitExceededException = TagSetListLimitExceededException;
class TriggerTargetsLimitExceededException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "TriggerTargetsLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "TriggerTargetsLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TriggerTargetsLimitExceededException.prototype);
    }
}
exports.TriggerTargetsLimitExceededException = TriggerTargetsLimitExceededException;
class DeploymentConfigInUseException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "DeploymentConfigInUseException",
            $fault: "client",
            ...opts,
        });
        this.name = "DeploymentConfigInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeploymentConfigInUseException.prototype);
    }
}
exports.DeploymentConfigInUseException = DeploymentConfigInUseException;
class InvalidOperationException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidOperationException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidOperationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidOperationException.prototype);
    }
}
exports.InvalidOperationException = InvalidOperationException;
class GitHubAccountTokenDoesNotExistException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "GitHubAccountTokenDoesNotExistException",
            $fault: "client",
            ...opts,
        });
        this.name = "GitHubAccountTokenDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, GitHubAccountTokenDoesNotExistException.prototype);
    }
}
exports.GitHubAccountTokenDoesNotExistException = GitHubAccountTokenDoesNotExistException;
class GitHubAccountTokenNameRequiredException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "GitHubAccountTokenNameRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "GitHubAccountTokenNameRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, GitHubAccountTokenNameRequiredException.prototype);
    }
}
exports.GitHubAccountTokenNameRequiredException = GitHubAccountTokenNameRequiredException;
class InvalidGitHubAccountTokenNameException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidGitHubAccountTokenNameException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidGitHubAccountTokenNameException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidGitHubAccountTokenNameException.prototype);
    }
}
exports.InvalidGitHubAccountTokenNameException = InvalidGitHubAccountTokenNameException;
class OperationNotSupportedException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "OperationNotSupportedException",
            $fault: "client",
            ...opts,
        });
        this.name = "OperationNotSupportedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OperationNotSupportedException.prototype);
    }
}
exports.OperationNotSupportedException = OperationNotSupportedException;
class ResourceValidationException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "ResourceValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceValidationException.prototype);
    }
}
exports.ResourceValidationException = ResourceValidationException;
class InvalidBucketNameFilterException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidBucketNameFilterException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidBucketNameFilterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidBucketNameFilterException.prototype);
    }
}
exports.InvalidBucketNameFilterException = InvalidBucketNameFilterException;
class InvalidDeployedStateFilterException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidDeployedStateFilterException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDeployedStateFilterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDeployedStateFilterException.prototype);
    }
}
exports.InvalidDeployedStateFilterException = InvalidDeployedStateFilterException;
class InvalidKeyPrefixFilterException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidKeyPrefixFilterException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidKeyPrefixFilterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidKeyPrefixFilterException.prototype);
    }
}
exports.InvalidKeyPrefixFilterException = InvalidKeyPrefixFilterException;
class InvalidNextTokenException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidNextTokenException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidNextTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidNextTokenException.prototype);
    }
}
exports.InvalidNextTokenException = InvalidNextTokenException;
class InvalidSortByException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidSortByException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidSortByException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidSortByException.prototype);
    }
}
exports.InvalidSortByException = InvalidSortByException;
class InvalidSortOrderException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidSortOrderException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidSortOrderException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidSortOrderException.prototype);
    }
}
exports.InvalidSortOrderException = InvalidSortOrderException;
exports.ListStateFilterAction = {
    Exclude: "exclude",
    Ignore: "ignore",
    Include: "include",
};
exports.SortOrder = {
    Ascending: "ascending",
    Descending: "descending",
};
class InvalidDeploymentInstanceTypeException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidDeploymentInstanceTypeException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDeploymentInstanceTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDeploymentInstanceTypeException.prototype);
    }
}
exports.InvalidDeploymentInstanceTypeException = InvalidDeploymentInstanceTypeException;
class InvalidInstanceStatusException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidInstanceStatusException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidInstanceStatusException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInstanceStatusException.prototype);
    }
}
exports.InvalidInstanceStatusException = InvalidInstanceStatusException;
class InvalidInstanceTypeException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidInstanceTypeException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidInstanceTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInstanceTypeException.prototype);
    }
}
exports.InvalidInstanceTypeException = InvalidInstanceTypeException;
class InvalidTargetFilterNameException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidTargetFilterNameException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidTargetFilterNameException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTargetFilterNameException.prototype);
    }
}
exports.InvalidTargetFilterNameException = InvalidTargetFilterNameException;
class InvalidExternalIdException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidExternalIdException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidExternalIdException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidExternalIdException.prototype);
    }
}
exports.InvalidExternalIdException = InvalidExternalIdException;
class InvalidTimeRangeException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidTimeRangeException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidTimeRangeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTimeRangeException.prototype);
    }
}
exports.InvalidTimeRangeException = InvalidTimeRangeException;
exports.TargetFilterName = {
    SERVER_INSTANCE_LABEL: "ServerInstanceLabel",
    TARGET_STATUS: "TargetStatus",
};
class InvalidRegistrationStatusException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidRegistrationStatusException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRegistrationStatusException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRegistrationStatusException.prototype);
    }
}
exports.InvalidRegistrationStatusException = InvalidRegistrationStatusException;
class InvalidTagFilterException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidTagFilterException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidTagFilterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTagFilterException.prototype);
    }
}
exports.InvalidTagFilterException = InvalidTagFilterException;
exports.RegistrationStatus = {
    Deregistered: "Deregistered",
    Registered: "Registered",
};
class InvalidArnException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidArnException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidArnException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidArnException.prototype);
    }
}
exports.InvalidArnException = InvalidArnException;
class ResourceArnRequiredException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "ResourceArnRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceArnRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceArnRequiredException.prototype);
    }
}
exports.ResourceArnRequiredException = ResourceArnRequiredException;
class InvalidLifecycleEventHookExecutionIdException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidLifecycleEventHookExecutionIdException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidLifecycleEventHookExecutionIdException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidLifecycleEventHookExecutionIdException.prototype);
    }
}
exports.InvalidLifecycleEventHookExecutionIdException = InvalidLifecycleEventHookExecutionIdException;
class InvalidLifecycleEventHookExecutionStatusException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidLifecycleEventHookExecutionStatusException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidLifecycleEventHookExecutionStatusException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidLifecycleEventHookExecutionStatusException.prototype);
    }
}
exports.InvalidLifecycleEventHookExecutionStatusException = InvalidLifecycleEventHookExecutionStatusException;
class LifecycleEventAlreadyCompletedException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "LifecycleEventAlreadyCompletedException",
            $fault: "client",
            ...opts,
        });
        this.name = "LifecycleEventAlreadyCompletedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LifecycleEventAlreadyCompletedException.prototype);
    }
}
exports.LifecycleEventAlreadyCompletedException = LifecycleEventAlreadyCompletedException;
class IamArnRequiredException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "IamArnRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "IamArnRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IamArnRequiredException.prototype);
    }
}
exports.IamArnRequiredException = IamArnRequiredException;
class IamSessionArnAlreadyRegisteredException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "IamSessionArnAlreadyRegisteredException",
            $fault: "client",
            ...opts,
        });
        this.name = "IamSessionArnAlreadyRegisteredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IamSessionArnAlreadyRegisteredException.prototype);
    }
}
exports.IamSessionArnAlreadyRegisteredException = IamSessionArnAlreadyRegisteredException;
class IamUserArnAlreadyRegisteredException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "IamUserArnAlreadyRegisteredException",
            $fault: "client",
            ...opts,
        });
        this.name = "IamUserArnAlreadyRegisteredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IamUserArnAlreadyRegisteredException.prototype);
    }
}
exports.IamUserArnAlreadyRegisteredException = IamUserArnAlreadyRegisteredException;
class IamUserArnRequiredException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "IamUserArnRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "IamUserArnRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IamUserArnRequiredException.prototype);
    }
}
exports.IamUserArnRequiredException = IamUserArnRequiredException;
class InstanceNameAlreadyRegisteredException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InstanceNameAlreadyRegisteredException",
            $fault: "client",
            ...opts,
        });
        this.name = "InstanceNameAlreadyRegisteredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InstanceNameAlreadyRegisteredException.prototype);
    }
}
exports.InstanceNameAlreadyRegisteredException = InstanceNameAlreadyRegisteredException;
class InvalidIamSessionArnException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidIamSessionArnException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidIamSessionArnException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidIamSessionArnException.prototype);
    }
}
exports.InvalidIamSessionArnException = InvalidIamSessionArnException;
class InvalidIamUserArnException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "InvalidIamUserArnException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidIamUserArnException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidIamUserArnException.prototype);
    }
}
exports.InvalidIamUserArnException = InvalidIamUserArnException;
class MultipleIamArnsProvidedException extends CodeDeployServiceException_1.CodeDeployServiceException {
    constructor(opts) {
        super({
            name: "MultipleIamArnsProvidedException",
            $fault: "client",
            ...opts,
        });
        this.name = "MultipleIamArnsProvidedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MultipleIamArnsProvidedException.prototype);
    }
}
exports.MultipleIamArnsProvidedException = MultipleIamArnsProvidedException;
exports.StopStatus = {
    PENDING: "Pending",
    SUCCEEDED: "Succeeded",
};
