import { MissingAnnotationEmptyState, InfoCard, ResponseErrorPanel, Table } from '@backstage/core-components';
import { useEntity } from '@backstage/plugin-catalog-react';
import { LinearProgress, Box, Grid, Link } from '@material-ui/core';
import React from 'react';
import { e as awsCodePipelineApiRef, f as isAWSCodePipelineAvailable, g as AWS_CODEPIPELINE_ARN_ANNOTATION } from './index-bfea995a.esm.js';
import { useAsyncRetry } from 'react-use';
import { useApi } from '@backstage/core-plugin-api';
import '@aws-sdk/util-arn-parser';
import { g as getCodePipelineArnFromEntity, P as PipelineStageStatus } from './PipelineStageStatus-d17af620.esm.js';
import 'humanize-duration';
import { A as AboutField } from './AboutField-2bd564e7.esm.js';
import '@backstage/errors';
import './getArnFromEntity-7fd0e044.esm.js';
import '@aws-sdk/client-codepipeline';

function useCodePipelineSummary(arn) {
  const api = useApi(awsCodePipelineApiRef);
  const {
    loading,
    value: pipelineInfo,
    error,
    retry
  } = useAsyncRetry(async () => {
    return await api.getPipelineState({ arn });
  }, []);
  return { loading, pipelineInfo, error, retry };
}

const PipelineStageTable = ({ stages }) => {
  const columns = [
    {
      title: "Stage",
      field: "id",
      render: (row) => {
        return row.stageName;
      }
    },
    {
      title: "Status",
      field: "deploymentStatus",
      render: (row) => {
        var _a;
        return /* @__PURE__ */ React.createElement(PipelineStageStatus, { status: (_a = row.latestExecution) == null ? void 0 : _a.status });
      }
    }
  ];
  return /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement(
    Table,
    {
      options: {
        paging: false,
        search: false,
        toolbar: false,
        padding: "dense"
      },
      data: stages,
      columns
    }
  ));
};
const PipelineWidgetContent = ({
  pipelineState,
  region
}) => {
  var _a;
  const pipelineUrl = `https://${region}.console.aws.amazon.com/codesuite/codepipeline/pipelines/${pipelineState.pipelineName}/view?region=${region}`;
  return /* @__PURE__ */ React.createElement(InfoCard, { title: "AWS CodePipeline", noPadding: true }, /* @__PURE__ */ React.createElement(Box, { sx: { m: 2 } }, /* @__PURE__ */ React.createElement(Grid, { container: true }, /* @__PURE__ */ React.createElement(AboutField, { label: "Pipeline Name", gridSizes: { md: 12 } }, /* @__PURE__ */ React.createElement(Link, { href: pipelineUrl, target: "_blank" }, pipelineState.pipelineName)))), /* @__PURE__ */ React.createElement(PipelineStageTable, { stages: (_a = pipelineState.stageStates) != null ? _a : [] }));
};
const PipelineLatestRunCard = ({
  entity,
  variant
}) => {
  const { region, arn } = getCodePipelineArnFromEntity(entity);
  const { pipelineInfo, error, loading } = useCodePipelineSummary(arn);
  if (pipelineInfo) {
    return /* @__PURE__ */ React.createElement(PipelineWidgetContent, { pipelineState: pipelineInfo, region });
  }
  return /* @__PURE__ */ React.createElement(InfoCard, { title: "AWS CodePipeline", variant }, error && /* @__PURE__ */ React.createElement(ResponseErrorPanel, { error }), loading && /* @__PURE__ */ React.createElement(LinearProgress, null));
};
const AWSCodePipelineWidget = ({
  variant
}) => {
  const { entity } = useEntity();
  return !isAWSCodePipelineAvailable(entity) ? /* @__PURE__ */ React.createElement(MissingAnnotationEmptyState, { annotation: AWS_CODEPIPELINE_ARN_ANNOTATION }) : /* @__PURE__ */ React.createElement(PipelineLatestRunCard, { entity, variant });
};

export { AWSCodePipelineWidget };
//# sourceMappingURL=index-313e8800.esm.js.map
