import { StatusAborted, StatusOK, StatusError, StatusRunning, MissingAnnotationEmptyState, InfoCard, ResponseErrorPanel, Table } from '@backstage/core-components';
import { useEntity } from '@backstage/plugin-catalog-react';
import { LinearProgress, Box, Grid, Link } from '@material-ui/core';
import React from 'react';
import { a as awsCodeBuildApiRef, A as AWS_CODEBUILD_PROJECT_ARN_ANNOTATION, i as isAWSCodeBuildProjectAvailable } from './index-bfea995a.esm.js';
import { useAsyncRetry } from 'react-use';
import { useApi } from '@backstage/core-plugin-api';
import '@aws-sdk/util-arn-parser';
import { g as getArnFromEntity } from './getArnFromEntity-7fd0e044.esm.js';
import { f as formatTime } from './time-ca403081.esm.js';
import { A as AboutField } from './AboutField-2bd564e7.esm.js';
import { StatusType } from '@aws-sdk/client-codebuild';
import '@backstage/errors';
import 'humanize-duration';

function useCodeBuildBuilds(arn) {
  const api = useApi(awsCodeBuildApiRef);
  const { loading, value, error, retry } = useAsyncRetry(async () => {
    const project = await api.getProject({ arn });
    const builds = await api.listBuilds({ arn });
    if (project.projects) {
      if (project.projects.length === 1) {
        return { project: project.projects[0], builds };
      }
    }
    throw new Error("CodeBuild project could not be retrieved");
  }, []);
  return {
    loading,
    builds: value == null ? void 0 : value.builds,
    project: value == null ? void 0 : value.project,
    error,
    retry
  };
}

function getCodeBuildArnFromEntity(entity) {
  const arn = getArnFromEntity(entity, AWS_CODEBUILD_PROJECT_ARN_ANNOTATION);
  const resourceParts = arn.resource.split("/");
  if (resourceParts.length !== 2) {
    throw new Error(`CodeBuild ARN not valid: ${arn.arn}`);
  }
  return { projectName: resourceParts[1], ...arn };
}

function getDuration(duration) {
  const durationSeconds = Math.floor(duration / 1e3);
  const hours = Math.floor(durationSeconds / 3600);
  const minutes = Math.floor(durationSeconds % 3600 / 60);
  const seconds = Math.floor(durationSeconds % 3600 % 60);
  const hoursString = hours > 0 ? hours + (hours === 1 ? " hour " : " hours ") : "";
  const minutesString = minutes > 0 ? minutes + (minutes === 1 ? " minute " : " minutes ") : "";
  const secondsString = seconds > 0 ? seconds + (seconds === 1 ? " second" : " seconds") : "";
  return hoursString + minutesString + secondsString;
}
function getDurationFromStringDates(start, end) {
  if (start && end) {
    return getDuration(new Date(end).getTime() - new Date(start).getTime());
  }
  return "Unknown";
}

const BuildStatus = ({ status }) => {
  switch (status) {
    case StatusType.IN_PROGRESS:
      return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(StatusRunning, null), " In progress");
    case StatusType.FAULT:
      return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(StatusError, null), " Fault");
    case StatusType.TIMED_OUT:
      return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(StatusError, null), " Timed out");
    case StatusType.FAILED:
      return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(StatusError, null), " Failed");
    case StatusType.SUCCEEDED:
      return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(StatusOK, null), " Succeeded");
    case StatusType.STOPPED:
      return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(StatusAborted, null), " Stopped");
    default:
      return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(StatusAborted, null), " Unknown");
  }
};

const BuildHistoryTable = ({
  region,
  accountId,
  project,
  builds
}) => {
  const columns = [
    {
      title: "Build run",
      field: "id",
      render: (row) => {
        return /* @__PURE__ */ React.createElement(
          Link,
          {
            href: `https://${region}.console.aws.amazon.com/codesuite/codebuild/${accountId}/projects/${project}/build/${row.id}/?region=${region}`,
            target: "_blank"
          },
          "#",
          row.buildNumber
        );
      }
    },
    {
      title: "Status",
      field: "deploymentStatus",
      render: (row) => /* @__PURE__ */ React.createElement(BuildStatus, { status: row.buildStatus })
    },
    {
      title: "Duration",
      field: "duration",
      render: (row) => {
        if (row.startTime && row.endTime) {
          return getDurationFromStringDates(row.startTime, row.endTime);
        }
        return "";
      }
    }
  ];
  return /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement(
    Table,
    {
      options: {
        paging: false,
        search: false,
        toolbar: false,
        padding: "dense"
      },
      data: builds,
      columns
    }
  ));
};
const projectMostRecentBuildStatus = (builds) => {
  if (builds.length > 0) {
    return /* @__PURE__ */ React.createElement(BuildStatus, { status: builds[0].buildStatus });
  }
  return /* @__PURE__ */ React.createElement(React.Fragment, null);
};
const projectMostRecentBuildExecuted = (builds) => {
  if (builds.length > 0) {
    const build = builds.find((el) => el.startTime);
    if (build) {
      return `${formatTime(build.startTime)} ago`;
    }
  }
  return /* @__PURE__ */ React.createElement(React.Fragment, null);
};
const projectMostRecentBuildDuration = (builds) => {
  if (builds.length > 0) {
    const build = builds.find((el) => el.startTime && el.endTime);
    if (build) {
      return getDurationFromStringDates(build.startTime, build.endTime);
    }
  }
  return /* @__PURE__ */ React.createElement(React.Fragment, null);
};
const WidgetContent = ({
  project,
  region,
  accountId,
  builds,
  buildHistoryLength
}) => {
  var _a;
  const projectUrl = `https://${region}.console.aws.amazon.com/codesuite/codebuild/${accountId}/projects/${project.name}/?region=${region}`;
  return /* @__PURE__ */ React.createElement(InfoCard, { title: "AWS CodeBuild Project", noPadding: true }, /* @__PURE__ */ React.createElement(Box, { sx: { m: 2 } }, /* @__PURE__ */ React.createElement(Grid, { container: true }, /* @__PURE__ */ React.createElement(AboutField, { label: "Project Name", gridSizes: { md: 12 } }, /* @__PURE__ */ React.createElement(Link, { href: projectUrl, target: "_blank" }, project.name)), /* @__PURE__ */ React.createElement(
    AboutField,
    {
      label: "Most recent build",
      gridSizes: { xs: 12, sm: 6, lg: 4 }
    },
    projectMostRecentBuildStatus(builds)
  ), /* @__PURE__ */ React.createElement(
    AboutField,
    {
      label: "Last executed",
      gridSizes: { xs: 12, sm: 6, lg: 4 }
    },
    projectMostRecentBuildExecuted(builds)
  ), /* @__PURE__ */ React.createElement(AboutField, { label: "Duration", gridSizes: { xs: 12, sm: 6, lg: 4 } }, projectMostRecentBuildDuration(builds)))), buildHistoryLength > 0 && /* @__PURE__ */ React.createElement(
    BuildHistoryTable,
    {
      region,
      accountId,
      project: project.name,
      builds: (_a = builds.slice(0, buildHistoryLength)) != null ? _a : []
    }
  ));
};
const BuildLatestRunCard = ({
  entity,
  buildHistoryLength,
  variant
}) => {
  const { accountId, region, arn } = getCodeBuildArnFromEntity(entity);
  const { project, builds, error, loading } = useCodeBuildBuilds(arn);
  if (project && builds) {
    return /* @__PURE__ */ React.createElement(
      WidgetContent,
      {
        project,
        region,
        accountId,
        builds: builds != null ? builds : [],
        buildHistoryLength
      }
    );
  }
  return /* @__PURE__ */ React.createElement(InfoCard, { title: "AWS CodeBuild Project", variant }, error && /* @__PURE__ */ React.createElement(ResponseErrorPanel, { error }), loading && /* @__PURE__ */ React.createElement(LinearProgress, null));
};
const AWSCodeBuildWidget = ({
  variant,
  buildHistoryLength = 3
}) => {
  const { entity } = useEntity();
  return !isAWSCodeBuildProjectAvailable(entity) ? /* @__PURE__ */ React.createElement(
    MissingAnnotationEmptyState,
    {
      annotation: AWS_CODEBUILD_PROJECT_ARN_ANNOTATION
    }
  ) : /* @__PURE__ */ React.createElement(
    BuildLatestRunCard,
    {
      entity,
      buildHistoryLength,
      variant
    }
  );
};

export { AWSCodeBuildWidget };
//# sourceMappingURL=index-98612c70.esm.js.map
