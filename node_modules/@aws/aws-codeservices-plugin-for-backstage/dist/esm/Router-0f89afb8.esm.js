import React from 'react';
import { Routes, Route } from 'react-router-dom';
import { e as awsCodePipelineApiRef, f as isAWSCodePipelineAvailable, g as AWS_CODEPIPELINE_ARN_ANNOTATION } from './index-bfea995a.esm.js';
import { useEntity } from '@backstage/plugin-catalog-react';
import { Table, SubvalueCell, MissingAnnotationEmptyState } from '@backstage/core-components';
import { Box, Typography, Link, Grid } from '@material-ui/core';
import RetryIcon from '@material-ui/icons/Replay';
import '@aws-sdk/util-arn-parser';
import { g as getCodePipelineArnFromEntity, P as PipelineStageStatus } from './PipelineStageStatus-d17af620.esm.js';
import { f as formatTime } from './time-ca403081.esm.js';
import { useAsyncRetry } from 'react-use';
import { useApi } from '@backstage/core-plugin-api';
import '@backstage/errors';
import './getArnFromEntity-7fd0e044.esm.js';
import '@aws-sdk/client-codepipeline';
import 'humanize-duration';

function useCodePipelineExecutions(arn) {
  const api = useApi(awsCodePipelineApiRef);
  const {
    loading,
    value: pipelineRunsSummaries,
    error,
    retry
  } = useAsyncRetry(async () => {
    return await api.listPipelineExecutions({ arn });
  }, []);
  return { loading, pipelineRunsSummaries, error, retry };
}

const renderTrigger = (row) => {
  var _a;
  if (row.sourceRevisions === void 0) {
    return /* @__PURE__ */ React.createElement(Typography, { variant: "body2", noWrap: true }, "-");
  }
  let commitMessage = "";
  if (row.sourceRevisions.length > 0) {
    const sourceRevision = row.sourceRevisions[0];
    if (sourceRevision.revisionSummary) {
      switch (sourceRevision.actionName) {
        case "SourceAction":
          commitMessage = sourceRevision.revisionSummary || "";
          break;
        case "Source":
          commitMessage = sourceRevision.revisionSummary || "";
          break;
        case "Checkout": {
          const summary = JSON.parse(sourceRevision.revisionSummary || "{}");
          commitMessage = summary.CommitMessage;
          break;
        }
      }
    }
    const subvalue = /* @__PURE__ */ React.createElement(React.Fragment, null, ((_a = sourceRevision.revisionId) == null ? void 0 : _a.substring(0, 6)) || "", " - ", commitMessage);
    return /* @__PURE__ */ React.createElement(SubvalueCell, { value: sourceRevision.actionName, subvalue });
  }
  return "-";
};
const generatedColumns = (pipelineName, region) => {
  return [
    {
      title: "Execution",
      field: "Pipeline",
      render: (row) => {
        if (row.pipelineExecutionId) {
          return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
            Link,
            {
              href: `https://${region}.console.aws.amazon.com/codesuite/codepipeline/pipelines/${pipelineName}/executions/${row.pipelineExecutionId}/timeline?region=${region}`,
              target: "_blank"
            },
            row.pipelineExecutionId
          ));
        }
        return /* @__PURE__ */ React.createElement(React.Fragment, null);
      }
    },
    {
      title: "Last Run",
      field: "",
      render: (row) => `${formatTime(row.lastUpdateTime)} ago`
    },
    {
      title: "Status",
      field: "status",
      render: (row) => {
        if (row.status) {
          return /* @__PURE__ */ React.createElement(Box, { display: "flex", alignItems: "center" }, /* @__PURE__ */ React.createElement(PipelineStageStatus, { status: row == null ? void 0 : row.status }));
        }
        return /* @__PURE__ */ React.createElement(React.Fragment, null);
      }
    },
    {
      title: "Source Revision",
      field: "revisions",
      render: (row) => renderTrigger(row)
    }
  ];
};
const AWSCodePipelineExecutionsTable = ({ entity }) => {
  const { pipelineName, region, arn } = getCodePipelineArnFromEntity(entity);
  const { loading, pipelineRunsSummaries, retry } = useCodePipelineExecutions(arn);
  return /* @__PURE__ */ React.createElement(
    Table,
    {
      isLoading: loading,
      actions: [
        {
          icon: () => /* @__PURE__ */ React.createElement(RetryIcon, null),
          tooltip: "Refresh Data",
          isFreeAction: true,
          onClick: () => retry()
        }
      ],
      data: pipelineRunsSummaries != null ? pipelineRunsSummaries : [],
      title: /* @__PURE__ */ React.createElement(Box, { display: "flex", alignItems: "center" }, /* @__PURE__ */ React.createElement(Box, { mr: 2 }), /* @__PURE__ */ React.createElement(Typography, { variant: "h6" }, "AWS CodePipeline")),
      columns: generatedColumns(pipelineName, region)
    }
  );
};

const AWSCodePipelineContent = () => {
  const { entity } = useEntity();
  return /* @__PURE__ */ React.createElement(Grid, { container: true, spacing: 3, direction: "column" }, /* @__PURE__ */ React.createElement(Grid, { item: true }, /* @__PURE__ */ React.createElement(AWSCodePipelineExecutionsTable, { entity })));
};

const Router = () => {
  const { entity } = useEntity();
  if (!isAWSCodePipelineAvailable(entity)) {
    return /* @__PURE__ */ React.createElement(
      MissingAnnotationEmptyState,
      {
        annotation: AWS_CODEPIPELINE_ARN_ANNOTATION
      }
    );
  }
  return /* @__PURE__ */ React.createElement(Routes, null, /* @__PURE__ */ React.createElement(Route, { path: "/", element: /* @__PURE__ */ React.createElement(AWSCodePipelineContent, null) }));
};

export { Router };
//# sourceMappingURL=Router-0f89afb8.esm.js.map
