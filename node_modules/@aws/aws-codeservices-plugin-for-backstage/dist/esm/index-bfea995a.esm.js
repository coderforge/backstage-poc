import { createApiRef, createRouteRef, createPlugin, createApiFactory, configApiRef, identityApiRef, createComponentExtension, createRoutableExtension } from '@backstage/core-plugin-api';
import { ResponseError } from '@backstage/errors';

const awsCodePipelineApiRef = createApiRef({
  id: "plugin.awscodepipeline.service"
});

const awsCodeBuildApiRef = createApiRef({
  id: "plugin.awscodebuild.service"
});

const awsCodeDeployApiRef = createApiRef({
  id: "plugin.awscodedeploy.service"
});

class AwsCodeBuildApiClient {
  constructor(options) {
    this.configApi = options.configApi;
    this.identityApi = options.identityApi;
  }
  async getProject({
    arn
  }) {
    const queryString = new URLSearchParams();
    queryString.append("arn", arn);
    const urlSegment = `project?${queryString}`;
    const service = await this.get(urlSegment);
    return service;
  }
  async listBuilds({ arn }) {
    const queryString = new URLSearchParams();
    queryString.append("arn", arn);
    const urlSegment = `builds?${queryString}`;
    const service = await this.get(urlSegment);
    return service;
  }
  async get(path) {
    const baseUrl = `${await this.configApi.getString(
      "backend.baseUrl"
    )}/api/aws-codeservices-backend/codebuild/}`;
    const url = new URL(path, baseUrl);
    const { token: idToken } = await this.identityApi.getCredentials();
    const response = await fetch(url.toString(), {
      headers: idToken ? { Authorization: `Bearer ${idToken}` } : {}
    });
    if (!response.ok) {
      throw await ResponseError.fromResponse(response);
    }
    return response.json();
  }
}

class AwsCodeDeployApiClient {
  constructor(options) {
    this.configApi = options.configApi;
    this.identityApi = options.identityApi;
  }
  async getDeploymentGroup({
    arn
  }) {
    const queryString = new URLSearchParams();
    queryString.append("arn", arn);
    const urlSegment = `deploymentGroup?${queryString}`;
    return await this.get(urlSegment);
  }
  async getDeployments({
    arn
  }) {
    const queryString = new URLSearchParams();
    queryString.append("arn", arn);
    const urlSegment = `deployments?${queryString}`;
    return await this.get(urlSegment);
  }
  async get(path) {
    const baseUrl = `${await this.configApi.getString(
      "backend.baseUrl"
    )}/api/aws-codeservices-backend/codedeploy/}`;
    const url = new URL(path, baseUrl);
    const { token: idToken } = await this.identityApi.getCredentials();
    const response = await fetch(url.toString(), {
      headers: idToken ? { Authorization: `Bearer ${idToken}` } : {}
    });
    if (!response.ok) {
      throw await ResponseError.fromResponse(response);
    }
    return response.json();
  }
}

class AwsCodePipelineApiClient {
  constructor(options) {
    this.configApi = options.configApi;
    this.identityApi = options.identityApi;
  }
  async getPipelineState({
    arn
  }) {
    const queryString = new URLSearchParams();
    queryString.append("arn", arn);
    const urlSegment = `pipelineState?${queryString}`;
    const service = await this.get(urlSegment);
    return service;
  }
  async listPipelineExecutions({
    arn
  }) {
    const queryString = new URLSearchParams();
    queryString.append("arn", arn);
    const urlSegment = `pipelineExecutions?${queryString}`;
    const service = await this.get(urlSegment);
    return service;
  }
  async get(path) {
    const baseUrl = `${await this.configApi.getString(
      "backend.baseUrl"
    )}/api/aws-codeservices-backend/codepipeline/}`;
    const url = new URL(path, baseUrl);
    const { token: idToken } = await this.identityApi.getCredentials();
    const response = await fetch(url.toString(), {
      headers: idToken ? { Authorization: `Bearer ${idToken}` } : {}
    });
    if (!response.ok) {
      throw await ResponseError.fromResponse(response);
    }
    return response.json();
  }
}

const rootRouteRef = createRouteRef({
  id: "aws-codeservices"
});
const codeServicesPlugin = createPlugin({
  id: "aws-codeservices",
  apis: [
    createApiFactory({
      api: awsCodePipelineApiRef,
      deps: { configApi: configApiRef, identityApi: identityApiRef },
      factory: ({ configApi, identityApi }) => new AwsCodePipelineApiClient({ configApi, identityApi })
    }),
    createApiFactory({
      api: awsCodeBuildApiRef,
      deps: { configApi: configApiRef, identityApi: identityApiRef },
      factory: ({ configApi, identityApi }) => new AwsCodeBuildApiClient({ configApi, identityApi })
    }),
    createApiFactory({
      api: awsCodeDeployApiRef,
      deps: { configApi: configApiRef, identityApi: identityApiRef },
      factory: ({ configApi, identityApi }) => new AwsCodeDeployApiClient({ configApi, identityApi })
    })
  ],
  routes: {
    entityContent: rootRouteRef
  }
});
const EntityAWSCodeBuildProjectOverviewCard = codeServicesPlugin.provide(
  createComponentExtension({
    name: "EntityAWSCodeBuildCard",
    component: {
      lazy: () => import('./index-98612c70.esm.js').then(
        (m) => m.AWSCodeBuildWidget
      )
    }
  })
);
const EntityAWSCodeDeployDeploymentGroupOverviewCard = codeServicesPlugin.provide(
  createComponentExtension({
    name: "EntityAWSCodeDeployCard",
    component: {
      lazy: () => import('./index-8213f2ad.esm.js').then(
        (m) => m.AWSCodeDeployWidget
      )
    }
  })
);
const EntityAWSCodePipelineOverviewCard = codeServicesPlugin.provide(
  createComponentExtension({
    name: "EntityAWSCodePipelineCard",
    component: {
      lazy: () => import('./index-313e8800.esm.js').then(
        (m) => m.AWSCodePipelineWidget
      )
    }
  })
);
const EntityAWSCodePipelineContent = codeServicesPlugin.provide(
  createRoutableExtension({
    name: "EntityAWSCodePipelineContent",
    component: () => import('./Router-0f89afb8.esm.js').then((m) => m.Router),
    mountPoint: rootRouteRef
  })
);

const AWS_CODEBUILD_PROJECT_ARN_ANNOTATION = "aws.amazon.com/aws-codebuild-project";
const AWS_CODEDEPLOY_DEPLOYMENT_GROUP_ARN_ANNOTATION = "aws.amazon.com/aws-codedeploy-group";
const AWS_CODEPIPELINE_ARN_ANNOTATION = "aws.amazon.com/aws-codepipeline";

const isAWSCodeBuildProjectAvailable = (entity) => {
  var _a;
  return Boolean(
    (_a = entity.metadata.annotations) == null ? void 0 : _a[AWS_CODEBUILD_PROJECT_ARN_ANNOTATION]
  );
};
const isAWSCodeDeployDeploymentGroupAvailable = (entity) => {
  var _a;
  return Boolean(
    (_a = entity.metadata.annotations) == null ? void 0 : _a[AWS_CODEDEPLOY_DEPLOYMENT_GROUP_ARN_ANNOTATION]
  );
};
const isAWSCodePipelineAvailable = (entity) => {
  var _a;
  return Boolean(
    (_a = entity.metadata.annotations) == null ? void 0 : _a[AWS_CODEPIPELINE_ARN_ANNOTATION]
  );
};

export { AWS_CODEBUILD_PROJECT_ARN_ANNOTATION as A, EntityAWSCodeBuildProjectOverviewCard as E, awsCodeBuildApiRef as a, awsCodeDeployApiRef as b, AWS_CODEDEPLOY_DEPLOYMENT_GROUP_ARN_ANNOTATION as c, isAWSCodeDeployDeploymentGroupAvailable as d, awsCodePipelineApiRef as e, isAWSCodePipelineAvailable as f, AWS_CODEPIPELINE_ARN_ANNOTATION as g, codeServicesPlugin as h, isAWSCodeBuildProjectAvailable as i, EntityAWSCodeDeployDeploymentGroupOverviewCard as j, EntityAWSCodePipelineOverviewCard as k, EntityAWSCodePipelineContent as l, rootRouteRef as r };
//# sourceMappingURL=index-bfea995a.esm.js.map
