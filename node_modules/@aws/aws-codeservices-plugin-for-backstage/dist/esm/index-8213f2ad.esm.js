import { DeploymentStatus as DeploymentStatus$1, DeploymentType } from '@aws-sdk/client-codedeploy';
import { StatusAborted, StatusOK, StatusError, StatusRunning, MissingAnnotationEmptyState, InfoCard, ResponseErrorPanel, Table } from '@backstage/core-components';
import { useEntity } from '@backstage/plugin-catalog-react';
import { LinearProgress, Box, Grid, Link } from '@material-ui/core';
import React from 'react';
import { b as awsCodeDeployApiRef, c as AWS_CODEDEPLOY_DEPLOYMENT_GROUP_ARN_ANNOTATION, d as isAWSCodeDeployDeploymentGroupAvailable } from './index-bfea995a.esm.js';
import { useAsyncRetry } from 'react-use';
import { useApi } from '@backstage/core-plugin-api';
import '@aws-sdk/util-arn-parser';
import { g as getArnFromEntity } from './getArnFromEntity-7fd0e044.esm.js';
import { f as formatTime } from './time-ca403081.esm.js';
import { A as AboutField } from './AboutField-2bd564e7.esm.js';
import '@backstage/errors';
import 'humanize-duration';

function useCodeDeployDeployments(arn) {
  const api = useApi(awsCodeDeployApiRef);
  const { loading, value, error, retry } = useAsyncRetry(async () => {
    const deploymentGroup = await api.getDeploymentGroup({ arn });
    const deploymentInfo = await api.getDeployments({ arn });
    let deployments = [];
    if (deploymentInfo.deploymentsInfo) {
      deployments = deploymentInfo.deploymentsInfo;
      deployments = deployments.sort((a, b) => {
        if (a.createTime && b.createTime) {
          return new Date(b.createTime).getTime() - new Date(a.createTime).getTime();
        }
        return 0;
      });
    }
    if (deploymentGroup.deploymentGroupsInfo) {
      return {
        deploymentGroup: deploymentGroup.deploymentGroupsInfo[0],
        deployments
      };
    }
    throw new Error("Deployment group undefined");
  }, []);
  return {
    loading,
    deploymentGroup: value == null ? void 0 : value.deploymentGroup,
    deployments: value == null ? void 0 : value.deployments,
    error,
    retry
  };
}

function getCodeDeployArnFromEntity(entity) {
  const arn = getArnFromEntity(
    entity,
    AWS_CODEDEPLOY_DEPLOYMENT_GROUP_ARN_ANNOTATION
  );
  const resourceParts = arn.resource.split(":");
  if (resourceParts.length !== 2) {
    throw new Error(`CodeDeploy ARN not valid: ${arn.arn}`);
  }
  const resourceNameParts = resourceParts[1].split("/");
  if (resourceNameParts.length !== 2) {
    throw new Error(`CodeDeploy ARN not valid: ${arn.arn}`);
  }
  return {
    applicationName: resourceNameParts[0],
    deploymentGroupName: resourceNameParts[1],
    ...arn
  };
}

const DeploymentStatus = ({
  status
}) => {
  switch (status) {
    case DeploymentStatus$1.QUEUED:
    case DeploymentStatus$1.IN_PROGRESS:
      return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(StatusRunning, null), " In progress");
    case DeploymentStatus$1.FAILED:
      return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(StatusError, null), " Failed");
    case DeploymentStatus$1.SUCCEEDED:
      return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(StatusOK, null), " Succeeded");
    case DeploymentStatus$1.STOPPED:
      return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(StatusAborted, null), " Aborted");
    default:
      return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(StatusAborted, null), " Unknown");
  }
};

const DeploymentHistoryTable = ({
  region,
  deployments
}) => {
  const columns = [
    {
      title: "Deployment ID",
      field: "id",
      render: (row) => {
        return /* @__PURE__ */ React.createElement(
          Link,
          {
            href: `https://${region}.console.aws.amazon.com/codesuite/codedeploy/deployments/${row.deploymentId}?region=${region}`,
            target: "_blank"
          },
          row.deploymentId
        );
      }
    },
    {
      title: "Status",
      field: "deploymentStatus",
      render: (row) => /* @__PURE__ */ React.createElement(DeploymentStatus, { status: row.status })
    },
    {
      title: "Start time",
      field: "startTime",
      render: (row) => `${formatTime(row.createTime)} ago`
    }
  ];
  return /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement(
    Table,
    {
      options: {
        paging: false,
        search: false,
        toolbar: false,
        padding: "dense"
      },
      data: deployments,
      columns
    }
  ));
};
const deploymentGroupDeploymentType = (deploymentGroup) => {
  if (deploymentGroup.deploymentStyle) {
    switch (deploymentGroup.deploymentStyle.deploymentType) {
      case DeploymentType.BLUE_GREEN:
        return "Blue/Green";
      case DeploymentType.IN_PLACE:
        return "In-place";
    }
  }
  return "None";
};
const deploymentGroupRollback = (deploymentGroup) => {
  var _a;
  if ((_a = deploymentGroup.autoRollbackConfiguration) == null ? void 0 : _a.enabled) {
    return "Yes";
  }
  return "No";
};
const DeployWidgetContent = ({
  deploymentGroup,
  deployments,
  region,
  deploymentHistoryLength
}) => {
  var _a;
  const deploymentGroupUrl = `https://${region}.console.aws.amazon.com/codesuite/codedeploy/applications/${deploymentGroup.applicationName}/deployment-groups/${deploymentGroup.deploymentGroupName}?region=${region}`;
  return /* @__PURE__ */ React.createElement(InfoCard, { title: "AWS CodeDeploy Deployment Group", noPadding: true }, /* @__PURE__ */ React.createElement(Box, { sx: { m: 2 } }, /* @__PURE__ */ React.createElement(Grid, { container: true }, /* @__PURE__ */ React.createElement(AboutField, { label: "Deployment group name", gridSizes: { md: 12 } }, /* @__PURE__ */ React.createElement(Link, { href: deploymentGroupUrl, target: "_blank" }, deploymentGroup.deploymentGroupName)), /* @__PURE__ */ React.createElement(
    AboutField,
    {
      label: "Compute platform",
      value: deploymentGroup.computePlatform,
      gridSizes: { xs: 12, sm: 6, lg: 4 }
    }
  ), /* @__PURE__ */ React.createElement(
    AboutField,
    {
      label: "Deployment type",
      value: deploymentGroupDeploymentType(deploymentGroup),
      gridSizes: { xs: 12, sm: 6, lg: 4 }
    }
  ), /* @__PURE__ */ React.createElement(
    AboutField,
    {
      label: "Rollback enabled",
      value: deploymentGroupRollback(deploymentGroup),
      gridSizes: { xs: 12, sm: 6, lg: 4 }
    }
  ))), deploymentHistoryLength > 0 && /* @__PURE__ */ React.createElement(
    DeploymentHistoryTable,
    {
      region,
      deployments: (_a = deployments.slice(0, deploymentHistoryLength)) != null ? _a : []
    }
  ));
};
const DeployLatestRunCard = ({
  entity,
  variant,
  deploymentHistoryLength
}) => {
  const { arn, region } = getCodeDeployArnFromEntity(entity);
  const { deploymentGroup, deployments, error, loading } = useCodeDeployDeployments(arn);
  if (deploymentGroup) {
    return /* @__PURE__ */ React.createElement(
      DeployWidgetContent,
      {
        deploymentGroup,
        deployments: deployments != null ? deployments : [],
        region,
        deploymentHistoryLength
      }
    );
  }
  return /* @__PURE__ */ React.createElement(InfoCard, { title: "AWS CodeDeploy Deployment Group", variant }, error && /* @__PURE__ */ React.createElement(ResponseErrorPanel, { error }), loading && /* @__PURE__ */ React.createElement(LinearProgress, null));
};
const AWSCodeDeployWidget = ({
  variant,
  deploymentHistoryLength = 3
}) => {
  const { entity } = useEntity();
  return !isAWSCodeDeployDeploymentGroupAvailable(entity) ? /* @__PURE__ */ React.createElement(
    MissingAnnotationEmptyState,
    {
      annotation: AWS_CODEDEPLOY_DEPLOYMENT_GROUP_ARN_ANNOTATION
    }
  ) : /* @__PURE__ */ React.createElement(
    DeployLatestRunCard,
    {
      entity,
      variant,
      deploymentHistoryLength
    }
  );
};

export { AWSCodeDeployWidget };
//# sourceMappingURL=index-8213f2ad.esm.js.map
